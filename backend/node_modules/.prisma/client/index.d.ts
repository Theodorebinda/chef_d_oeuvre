
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Reunion
 * 
 */
export type Reunion = $Result.DefaultSelection<Prisma.$ReunionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Sessions
 * 
 */
export type Sessions = $Result.DefaultSelection<Prisma.$SessionsPayload>
/**
 * Model Appartenir
 * 
 */
export type Appartenir = $Result.DefaultSelection<Prisma.$AppartenirPayload>
/**
 * Model Connecter
 * 
 */
export type Connecter = $Result.DefaultSelection<Prisma.$ConnecterPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.reunion`: Exposes CRUD operations for the **Reunion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reunions
    * const reunions = await prisma.reunion.findMany()
    * ```
    */
  get reunion(): Prisma.ReunionDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **Sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.SessionsDelegate<ExtArgs>;

  /**
   * `prisma.appartenir`: Exposes CRUD operations for the **Appartenir** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appartenirs
    * const appartenirs = await prisma.appartenir.findMany()
    * ```
    */
  get appartenir(): Prisma.AppartenirDelegate<ExtArgs>;

  /**
   * `prisma.connecter`: Exposes CRUD operations for the **Connecter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Connecters
    * const connecters = await prisma.connecter.findMany()
    * ```
    */
  get connecter(): Prisma.ConnecterDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Role: 'Role',
    Reunion: 'Reunion',
    Message: 'Message',
    Sessions: 'Sessions',
    Appartenir: 'Appartenir',
    Connecter: 'Connecter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'role' | 'reunion' | 'message' | 'sessions' | 'appartenir' | 'connecter'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Reunion: {
        payload: Prisma.$ReunionPayload<ExtArgs>
        fields: Prisma.ReunionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReunionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReunionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          findFirst: {
            args: Prisma.ReunionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReunionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          findMany: {
            args: Prisma.ReunionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>[]
          }
          create: {
            args: Prisma.ReunionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          createMany: {
            args: Prisma.ReunionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReunionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          update: {
            args: Prisma.ReunionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          deleteMany: {
            args: Prisma.ReunionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReunionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReunionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          aggregate: {
            args: Prisma.ReunionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReunion>
          }
          groupBy: {
            args: Prisma.ReunionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReunionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReunionCountArgs<ExtArgs>,
            result: $Utils.Optional<ReunionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Sessions: {
        payload: Prisma.$SessionsPayload<ExtArgs>
        fields: Prisma.SessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          findFirst: {
            args: Prisma.SessionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          findMany: {
            args: Prisma.SessionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>[]
          }
          create: {
            args: Prisma.SessionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          createMany: {
            args: Prisma.SessionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          update: {
            args: Prisma.SessionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          deleteMany: {
            args: Prisma.SessionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          aggregate: {
            args: Prisma.SessionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSessions>
          }
          groupBy: {
            args: Prisma.SessionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionsCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionsCountAggregateOutputType> | number
          }
        }
      }
      Appartenir: {
        payload: Prisma.$AppartenirPayload<ExtArgs>
        fields: Prisma.AppartenirFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppartenirFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppartenirFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          findFirst: {
            args: Prisma.AppartenirFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppartenirFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          findMany: {
            args: Prisma.AppartenirFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>[]
          }
          create: {
            args: Prisma.AppartenirCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          createMany: {
            args: Prisma.AppartenirCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppartenirDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          update: {
            args: Prisma.AppartenirUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          deleteMany: {
            args: Prisma.AppartenirDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppartenirUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppartenirUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppartenirPayload>
          }
          aggregate: {
            args: Prisma.AppartenirAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAppartenir>
          }
          groupBy: {
            args: Prisma.AppartenirGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppartenirGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppartenirCountArgs<ExtArgs>,
            result: $Utils.Optional<AppartenirCountAggregateOutputType> | number
          }
        }
      }
      Connecter: {
        payload: Prisma.$ConnecterPayload<ExtArgs>
        fields: Prisma.ConnecterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConnecterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConnecterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          findFirst: {
            args: Prisma.ConnecterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConnecterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          findMany: {
            args: Prisma.ConnecterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>[]
          }
          create: {
            args: Prisma.ConnecterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          createMany: {
            args: Prisma.ConnecterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConnecterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          update: {
            args: Prisma.ConnecterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          deleteMany: {
            args: Prisma.ConnecterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConnecterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConnecterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnecterPayload>
          }
          aggregate: {
            args: Prisma.ConnecterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConnecter>
          }
          groupBy: {
            args: Prisma.ConnecterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConnecterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConnecterCountArgs<ExtArgs>,
            result: $Utils.Optional<ConnecterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    Role: number
    Reunion: number
    message: number
    connecter: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Role?: boolean | UsersCountOutputTypeCountRoleArgs
    Reunion?: boolean | UsersCountOutputTypeCountReunionArgs
    message?: boolean | UsersCountOutputTypeCountMessageArgs
    connecter?: boolean | UsersCountOutputTypeCountConnecterArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountConnecterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnecterWhereInput
  }


  /**
   * Count Type ReunionCountOutputType
   */

  export type ReunionCountOutputType = {
    users: number
    message: number
    session: number
    appartenir: number
  }

  export type ReunionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ReunionCountOutputTypeCountUsersArgs
    message?: boolean | ReunionCountOutputTypeCountMessageArgs
    session?: boolean | ReunionCountOutputTypeCountSessionArgs
    appartenir?: boolean | ReunionCountOutputTypeCountAppartenirArgs
  }

  // Custom InputTypes
  /**
   * ReunionCountOutputType without action
   */
  export type ReunionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReunionCountOutputType
     */
    select?: ReunionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReunionCountOutputType without action
   */
  export type ReunionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }

  /**
   * ReunionCountOutputType without action
   */
  export type ReunionCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ReunionCountOutputType without action
   */
  export type ReunionCountOutputTypeCountSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionsWhereInput
  }

  /**
   * ReunionCountOutputType without action
   */
  export type ReunionCountOutputTypeCountAppartenirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenirWhereInput
  }


  /**
   * Count Type SessionsCountOutputType
   */

  export type SessionsCountOutputType = {
    Reunion: number
    appartenir: number
    connecter: number
  }

  export type SessionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | SessionsCountOutputTypeCountReunionArgs
    appartenir?: boolean | SessionsCountOutputTypeCountAppartenirArgs
    connecter?: boolean | SessionsCountOutputTypeCountConnecterArgs
  }

  // Custom InputTypes
  /**
   * SessionsCountOutputType without action
   */
  export type SessionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionsCountOutputType
     */
    select?: SessionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionsCountOutputType without action
   */
  export type SessionsCountOutputTypeCountReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
  }

  /**
   * SessionsCountOutputType without action
   */
  export type SessionsCountOutputTypeCountAppartenirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenirWhereInput
  }

  /**
   * SessionsCountOutputType without action
   */
  export type SessionsCountOutputTypeCountConnecterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnecterWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    age: number | null
    anneeDiplome: number | null
    reunionId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    age: number | null
    anneeDiplome: number | null
    reunionId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    prenom: string | null
    nom: string | null
    email: string | null
    password: string | null
    pays: string | null
    ville: string | null
    tel: string | null
    age: number | null
    avatar: Buffer | null
    thematique: string | null
    cursus: string | null
    nomDiplome: string | null
    anneeDiplome: number | null
    etablissementDobtention: string | null
    filiere: string | null
    secteurDactivite: string | null
    intitulerDePoste: string | null
    entreprise: string | null
    objectifProfessionelle: string | null
    competenceAdevelopper: string | null
    interets: string | null
    domaineDeMentorate: string | null
    domaineDexpertise: string | null
    url: string | null
    reunionId: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    prenom: string | null
    nom: string | null
    email: string | null
    password: string | null
    pays: string | null
    ville: string | null
    tel: string | null
    age: number | null
    avatar: Buffer | null
    thematique: string | null
    cursus: string | null
    nomDiplome: string | null
    anneeDiplome: number | null
    etablissementDobtention: string | null
    filiere: string | null
    secteurDactivite: string | null
    intitulerDePoste: string | null
    entreprise: string | null
    objectifProfessionelle: string | null
    competenceAdevelopper: string | null
    interets: string | null
    domaineDeMentorate: string | null
    domaineDexpertise: string | null
    url: string | null
    reunionId: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    prenom: number
    nom: number
    email: number
    password: number
    pays: number
    ville: number
    tel: number
    age: number
    avatar: number
    thematique: number
    cursus: number
    nomDiplome: number
    anneeDiplome: number
    etablissementDobtention: number
    filiere: number
    secteurDactivite: number
    intitulerDePoste: number
    entreprise: number
    objectifProfessionelle: number
    competenceAdevelopper: number
    interets: number
    domaineDeMentorate: number
    domaineDexpertise: number
    url: number
    reunionId: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    age?: true
    anneeDiplome?: true
    reunionId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    age?: true
    anneeDiplome?: true
    reunionId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    email?: true
    password?: true
    pays?: true
    ville?: true
    tel?: true
    age?: true
    avatar?: true
    thematique?: true
    cursus?: true
    nomDiplome?: true
    anneeDiplome?: true
    etablissementDobtention?: true
    filiere?: true
    secteurDactivite?: true
    intitulerDePoste?: true
    entreprise?: true
    objectifProfessionelle?: true
    competenceAdevelopper?: true
    interets?: true
    domaineDeMentorate?: true
    domaineDexpertise?: true
    url?: true
    reunionId?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    email?: true
    password?: true
    pays?: true
    ville?: true
    tel?: true
    age?: true
    avatar?: true
    thematique?: true
    cursus?: true
    nomDiplome?: true
    anneeDiplome?: true
    etablissementDobtention?: true
    filiere?: true
    secteurDactivite?: true
    intitulerDePoste?: true
    entreprise?: true
    objectifProfessionelle?: true
    competenceAdevelopper?: true
    interets?: true
    domaineDeMentorate?: true
    domaineDexpertise?: true
    url?: true
    reunionId?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    email?: true
    password?: true
    pays?: true
    ville?: true
    tel?: true
    age?: true
    avatar?: true
    thematique?: true
    cursus?: true
    nomDiplome?: true
    anneeDiplome?: true
    etablissementDobtention?: true
    filiere?: true
    secteurDactivite?: true
    intitulerDePoste?: true
    entreprise?: true
    objectifProfessionelle?: true
    competenceAdevelopper?: true
    interets?: true
    domaineDeMentorate?: true
    domaineDexpertise?: true
    url?: true
    reunionId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar: Buffer | null
    thematique: string | null
    cursus: string | null
    nomDiplome: string | null
    anneeDiplome: number | null
    etablissementDobtention: string | null
    filiere: string | null
    secteurDactivite: string | null
    intitulerDePoste: string | null
    entreprise: string | null
    objectifProfessionelle: string | null
    competenceAdevelopper: string | null
    interets: string | null
    domaineDeMentorate: string | null
    domaineDexpertise: string | null
    url: string | null
    reunionId: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prenom?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    pays?: boolean
    ville?: boolean
    tel?: boolean
    age?: boolean
    avatar?: boolean
    thematique?: boolean
    cursus?: boolean
    nomDiplome?: boolean
    anneeDiplome?: boolean
    etablissementDobtention?: boolean
    filiere?: boolean
    secteurDactivite?: boolean
    intitulerDePoste?: boolean
    entreprise?: boolean
    objectifProfessionelle?: boolean
    competenceAdevelopper?: boolean
    interets?: boolean
    domaineDeMentorate?: boolean
    domaineDexpertise?: boolean
    url?: boolean
    reunionId?: boolean
    Role?: boolean | Users$RoleArgs<ExtArgs>
    Reunion?: boolean | Users$ReunionArgs<ExtArgs>
    message?: boolean | Users$messageArgs<ExtArgs>
    connecter?: boolean | Users$connecterArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    prenom?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    pays?: boolean
    ville?: boolean
    tel?: boolean
    age?: boolean
    avatar?: boolean
    thematique?: boolean
    cursus?: boolean
    nomDiplome?: boolean
    anneeDiplome?: boolean
    etablissementDobtention?: boolean
    filiere?: boolean
    secteurDactivite?: boolean
    intitulerDePoste?: boolean
    entreprise?: boolean
    objectifProfessionelle?: boolean
    competenceAdevelopper?: boolean
    interets?: boolean
    domaineDeMentorate?: boolean
    domaineDexpertise?: boolean
    url?: boolean
    reunionId?: boolean
  }


  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Role?: boolean | Users$RoleArgs<ExtArgs>
    Reunion?: boolean | Users$ReunionArgs<ExtArgs>
    message?: boolean | Users$messageArgs<ExtArgs>
    connecter?: boolean | Users$connecterArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      Role: Prisma.$RolePayload<ExtArgs>[]
      Reunion: Prisma.$ReunionPayload<ExtArgs>[]
      message: Prisma.$MessagePayload<ExtArgs>[]
      connecter: Prisma.$ConnecterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      prenom: string
      nom: string
      email: string
      password: string
      pays: string
      ville: string
      tel: string
      age: number
      avatar: Buffer | null
      thematique: string | null
      cursus: string | null
      nomDiplome: string | null
      anneeDiplome: number | null
      etablissementDobtention: string | null
      filiere: string | null
      secteurDactivite: string | null
      intitulerDePoste: string | null
      entreprise: string | null
      objectifProfessionelle: string | null
      competenceAdevelopper: string | null
      interets: string | null
      domaineDeMentorate: string | null
      domaineDexpertise: string | null
      url: string | null
      reunionId: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Role<T extends Users$RoleArgs<ExtArgs> = {}>(args?: Subset<T, Users$RoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'> | Null>;

    Reunion<T extends Users$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Users$ReunionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'> | Null>;

    message<T extends Users$messageArgs<ExtArgs> = {}>(args?: Subset<T, Users$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    connecter<T extends Users$connecterArgs<ExtArgs> = {}>(args?: Subset<T, Users$connecterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly prenom: FieldRef<"Users", 'String'>
    readonly nom: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly pays: FieldRef<"Users", 'String'>
    readonly ville: FieldRef<"Users", 'String'>
    readonly tel: FieldRef<"Users", 'String'>
    readonly age: FieldRef<"Users", 'Int'>
    readonly avatar: FieldRef<"Users", 'Bytes'>
    readonly thematique: FieldRef<"Users", 'String'>
    readonly cursus: FieldRef<"Users", 'String'>
    readonly nomDiplome: FieldRef<"Users", 'String'>
    readonly anneeDiplome: FieldRef<"Users", 'Int'>
    readonly etablissementDobtention: FieldRef<"Users", 'String'>
    readonly filiere: FieldRef<"Users", 'String'>
    readonly secteurDactivite: FieldRef<"Users", 'String'>
    readonly intitulerDePoste: FieldRef<"Users", 'String'>
    readonly entreprise: FieldRef<"Users", 'String'>
    readonly objectifProfessionelle: FieldRef<"Users", 'String'>
    readonly competenceAdevelopper: FieldRef<"Users", 'String'>
    readonly interets: FieldRef<"Users", 'String'>
    readonly domaineDeMentorate: FieldRef<"Users", 'String'>
    readonly domaineDexpertise: FieldRef<"Users", 'String'>
    readonly url: FieldRef<"Users", 'String'>
    readonly reunionId: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.Role
   */
  export type Users$RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Users.Reunion
   */
  export type Users$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    cursor?: ReunionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Users.message
   */
  export type Users$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Users.connecter
   */
  export type Users$connecterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    where?: ConnecterWhereInput
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    cursor?: ConnecterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnecterScalarFieldEnum | ConnecterScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    nom: string | null
    usersId: number | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    usersId: number | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    nom: number
    usersId: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    nom?: true
    usersId?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    nom?: true
    usersId?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    nom?: true
    usersId?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    nom: string
    usersId: number
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    usersId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    nom?: boolean
    usersId?: boolean
  }


  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      usersId: number
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly nom: FieldRef<"Role", 'String'>
    readonly usersId: FieldRef<"Role", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Reunion
   */

  export type AggregateReunion = {
    _count: ReunionCountAggregateOutputType | null
    _avg: ReunionAvgAggregateOutputType | null
    _sum: ReunionSumAggregateOutputType | null
    _min: ReunionMinAggregateOutputType | null
    _max: ReunionMaxAggregateOutputType | null
  }

  export type ReunionAvgAggregateOutputType = {
    id: number | null
    date: number | null
    usersId: number | null
  }

  export type ReunionSumAggregateOutputType = {
    id: number | null
    date: number | null
    usersId: number | null
  }

  export type ReunionMinAggregateOutputType = {
    id: number | null
    sujet: string | null
    date: number | null
    duree: string | null
    lieu: string | null
    usersId: number | null
  }

  export type ReunionMaxAggregateOutputType = {
    id: number | null
    sujet: string | null
    date: number | null
    duree: string | null
    lieu: string | null
    usersId: number | null
  }

  export type ReunionCountAggregateOutputType = {
    id: number
    sujet: number
    date: number
    duree: number
    lieu: number
    usersId: number
    _all: number
  }


  export type ReunionAvgAggregateInputType = {
    id?: true
    date?: true
    usersId?: true
  }

  export type ReunionSumAggregateInputType = {
    id?: true
    date?: true
    usersId?: true
  }

  export type ReunionMinAggregateInputType = {
    id?: true
    sujet?: true
    date?: true
    duree?: true
    lieu?: true
    usersId?: true
  }

  export type ReunionMaxAggregateInputType = {
    id?: true
    sujet?: true
    date?: true
    duree?: true
    lieu?: true
    usersId?: true
  }

  export type ReunionCountAggregateInputType = {
    id?: true
    sujet?: true
    date?: true
    duree?: true
    lieu?: true
    usersId?: true
    _all?: true
  }

  export type ReunionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reunion to aggregate.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reunions
    **/
    _count?: true | ReunionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReunionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReunionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReunionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReunionMaxAggregateInputType
  }

  export type GetReunionAggregateType<T extends ReunionAggregateArgs> = {
        [P in keyof T & keyof AggregateReunion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReunion[P]>
      : GetScalarType<T[P], AggregateReunion[P]>
  }




  export type ReunionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithAggregationInput | ReunionOrderByWithAggregationInput[]
    by: ReunionScalarFieldEnum[] | ReunionScalarFieldEnum
    having?: ReunionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReunionCountAggregateInputType | true
    _avg?: ReunionAvgAggregateInputType
    _sum?: ReunionSumAggregateInputType
    _min?: ReunionMinAggregateInputType
    _max?: ReunionMaxAggregateInputType
  }

  export type ReunionGroupByOutputType = {
    id: number
    sujet: string
    date: number
    duree: string | null
    lieu: string
    usersId: number
    _count: ReunionCountAggregateOutputType | null
    _avg: ReunionAvgAggregateOutputType | null
    _sum: ReunionSumAggregateOutputType | null
    _min: ReunionMinAggregateOutputType | null
    _max: ReunionMaxAggregateOutputType | null
  }

  type GetReunionGroupByPayload<T extends ReunionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReunionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReunionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReunionGroupByOutputType[P]>
            : GetScalarType<T[P], ReunionGroupByOutputType[P]>
        }
      >
    >


  export type ReunionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sujet?: boolean
    date?: boolean
    duree?: boolean
    lieu?: boolean
    usersId?: boolean
    users?: boolean | Reunion$usersArgs<ExtArgs>
    message?: boolean | Reunion$messageArgs<ExtArgs>
    session?: boolean | Reunion$sessionArgs<ExtArgs>
    appartenir?: boolean | Reunion$appartenirArgs<ExtArgs>
    _count?: boolean | ReunionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reunion"]>

  export type ReunionSelectScalar = {
    id?: boolean
    sujet?: boolean
    date?: boolean
    duree?: boolean
    lieu?: boolean
    usersId?: boolean
  }


  export type ReunionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Reunion$usersArgs<ExtArgs>
    message?: boolean | Reunion$messageArgs<ExtArgs>
    session?: boolean | Reunion$sessionArgs<ExtArgs>
    appartenir?: boolean | Reunion$appartenirArgs<ExtArgs>
    _count?: boolean | ReunionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReunionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reunion"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>[]
      message: Prisma.$MessagePayload<ExtArgs>[]
      session: Prisma.$SessionsPayload<ExtArgs>[]
      appartenir: Prisma.$AppartenirPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sujet: string
      date: number
      duree: string | null
      lieu: string
      usersId: number
    }, ExtArgs["result"]["reunion"]>
    composites: {}
  }


  type ReunionGetPayload<S extends boolean | null | undefined | ReunionDefaultArgs> = $Result.GetResult<Prisma.$ReunionPayload, S>

  type ReunionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReunionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReunionCountAggregateInputType | true
    }

  export interface ReunionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reunion'], meta: { name: 'Reunion' } }
    /**
     * Find zero or one Reunion that matches the filter.
     * @param {ReunionFindUniqueArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReunionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionFindUniqueArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reunion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReunionFindUniqueOrThrowArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReunionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reunion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindFirstArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReunionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindFirstArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reunion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindFirstOrThrowArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReunionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reunions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reunions
     * const reunions = await prisma.reunion.findMany()
     * 
     * // Get first 10 Reunions
     * const reunions = await prisma.reunion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reunionWithIdOnly = await prisma.reunion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReunionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reunion.
     * @param {ReunionCreateArgs} args - Arguments to create a Reunion.
     * @example
     * // Create one Reunion
     * const Reunion = await prisma.reunion.create({
     *   data: {
     *     // ... data to create a Reunion
     *   }
     * })
     * 
    **/
    create<T extends ReunionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionCreateArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reunions.
     *     @param {ReunionCreateManyArgs} args - Arguments to create many Reunions.
     *     @example
     *     // Create many Reunions
     *     const reunion = await prisma.reunion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReunionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reunion.
     * @param {ReunionDeleteArgs} args - Arguments to delete one Reunion.
     * @example
     * // Delete one Reunion
     * const Reunion = await prisma.reunion.delete({
     *   where: {
     *     // ... filter to delete one Reunion
     *   }
     * })
     * 
    **/
    delete<T extends ReunionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionDeleteArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reunion.
     * @param {ReunionUpdateArgs} args - Arguments to update one Reunion.
     * @example
     * // Update one Reunion
     * const reunion = await prisma.reunion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReunionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpdateArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reunions.
     * @param {ReunionDeleteManyArgs} args - Arguments to filter Reunions to delete.
     * @example
     * // Delete a few Reunions
     * const { count } = await prisma.reunion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReunionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reunions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reunions
     * const reunion = await prisma.reunion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReunionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reunion.
     * @param {ReunionUpsertArgs} args - Arguments to update or create a Reunion.
     * @example
     * // Update or create a Reunion
     * const reunion = await prisma.reunion.upsert({
     *   create: {
     *     // ... data to create a Reunion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reunion we want to update
     *   }
     * })
    **/
    upsert<T extends ReunionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpsertArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reunions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionCountArgs} args - Arguments to filter Reunions to count.
     * @example
     * // Count the number of Reunions
     * const count = await prisma.reunion.count({
     *   where: {
     *     // ... the filter for the Reunions we want to count
     *   }
     * })
    **/
    count<T extends ReunionCountArgs>(
      args?: Subset<T, ReunionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReunionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reunion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReunionAggregateArgs>(args: Subset<T, ReunionAggregateArgs>): Prisma.PrismaPromise<GetReunionAggregateType<T>>

    /**
     * Group by Reunion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReunionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReunionGroupByArgs['orderBy'] }
        : { orderBy?: ReunionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReunionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReunionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reunion model
   */
  readonly fields: ReunionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reunion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReunionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Reunion$usersArgs<ExtArgs> = {}>(args?: Subset<T, Reunion$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    message<T extends Reunion$messageArgs<ExtArgs> = {}>(args?: Subset<T, Reunion$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    session<T extends Reunion$sessionArgs<ExtArgs> = {}>(args?: Subset<T, Reunion$sessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    appartenir<T extends Reunion$appartenirArgs<ExtArgs> = {}>(args?: Subset<T, Reunion$appartenirArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reunion model
   */ 
  interface ReunionFieldRefs {
    readonly id: FieldRef<"Reunion", 'Int'>
    readonly sujet: FieldRef<"Reunion", 'String'>
    readonly date: FieldRef<"Reunion", 'Int'>
    readonly duree: FieldRef<"Reunion", 'String'>
    readonly lieu: FieldRef<"Reunion", 'String'>
    readonly usersId: FieldRef<"Reunion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Reunion findUnique
   */
  export type ReunionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion findUniqueOrThrow
   */
  export type ReunionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion findFirst
   */
  export type ReunionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reunions.
     */
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion findFirstOrThrow
   */
  export type ReunionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reunions.
     */
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion findMany
   */
  export type ReunionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunions to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion create
   */
  export type ReunionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The data needed to create a Reunion.
     */
    data: XOR<ReunionCreateInput, ReunionUncheckedCreateInput>
  }

  /**
   * Reunion createMany
   */
  export type ReunionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reunions.
     */
    data: ReunionCreateManyInput | ReunionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reunion update
   */
  export type ReunionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The data needed to update a Reunion.
     */
    data: XOR<ReunionUpdateInput, ReunionUncheckedUpdateInput>
    /**
     * Choose, which Reunion to update.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion updateMany
   */
  export type ReunionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reunions.
     */
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyInput>
    /**
     * Filter which Reunions to update
     */
    where?: ReunionWhereInput
  }

  /**
   * Reunion upsert
   */
  export type ReunionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The filter to search for the Reunion to update in case it exists.
     */
    where: ReunionWhereUniqueInput
    /**
     * In case the Reunion found by the `where` argument doesn't exist, create a new Reunion with this data.
     */
    create: XOR<ReunionCreateInput, ReunionUncheckedCreateInput>
    /**
     * In case the Reunion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReunionUpdateInput, ReunionUncheckedUpdateInput>
  }

  /**
   * Reunion delete
   */
  export type ReunionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter which Reunion to delete.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion deleteMany
   */
  export type ReunionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reunions to delete
     */
    where?: ReunionWhereInput
  }

  /**
   * Reunion.users
   */
  export type Reunion$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Reunion.message
   */
  export type Reunion$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Reunion.session
   */
  export type Reunion$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    where?: SessionsWhereInput
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    cursor?: SessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Reunion.appartenir
   */
  export type Reunion$appartenirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    where?: AppartenirWhereInput
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    cursor?: AppartenirWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppartenirScalarFieldEnum | AppartenirScalarFieldEnum[]
  }

  /**
   * Reunion without action
   */
  export type ReunionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
    reunionId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    usersId: number | null
    reunionId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    usersId: number | null
    reunionId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    usersId: number | null
    reunionId: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    usersId: number
    reunionId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    usersId?: true
    reunionId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    usersId?: true
    reunionId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    usersId?: true
    reunionId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    usersId?: true
    reunionId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    usersId?: true
    reunionId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    content: string
    usersId: number | null
    reunionId: number | null
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    usersId?: boolean
    reunionId?: boolean
    Users?: boolean | Message$UsersArgs<ExtArgs>
    Reunion?: boolean | Message$ReunionArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    usersId?: boolean
    reunionId?: boolean
  }


  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | Message$UsersArgs<ExtArgs>
    Reunion?: boolean | Message$ReunionArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs> | null
      Reunion: Prisma.$ReunionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      usersId: number | null
      reunionId: number | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Users<T extends Message$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Message$UsersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Reunion<T extends Message$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Message$ReunionArgs<ExtArgs>>): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
    readonly usersId: FieldRef<"Message", 'Int'>
    readonly reunionId: FieldRef<"Message", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.Users
   */
  export type Message$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Message.Reunion
   */
  export type Message$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Sessions
   */

  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsAvgAggregateOutputType = {
    id: number | null
    point: number | null
    reunionId: number | null
  }

  export type SessionsSumAggregateOutputType = {
    id: number | null
    point: number | null
    reunionId: number | null
  }

  export type SessionsMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    duree: string | null
    contacts: string | null
    point: number | null
    ressources: string | null
    reunionId: number | null
  }

  export type SessionsMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    duree: string | null
    contacts: string | null
    point: number | null
    ressources: string | null
    reunionId: number | null
  }

  export type SessionsCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    createdAt: number
    updatedAt: number
    duree: number
    contacts: number
    point: number
    ressources: number
    reunionId: number
    _all: number
  }


  export type SessionsAvgAggregateInputType = {
    id?: true
    point?: true
    reunionId?: true
  }

  export type SessionsSumAggregateInputType = {
    id?: true
    point?: true
    reunionId?: true
  }

  export type SessionsMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    duree?: true
    contacts?: true
    point?: true
    ressources?: true
    reunionId?: true
  }

  export type SessionsMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    duree?: true
    contacts?: true
    point?: true
    ressources?: true
    reunionId?: true
  }

  export type SessionsCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    duree?: true
    contacts?: true
    point?: true
    ressources?: true
    reunionId?: true
    _all?: true
  }

  export type SessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to aggregate.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionsWhereInput
    orderBy?: SessionsOrderByWithAggregationInput | SessionsOrderByWithAggregationInput[]
    by: SessionsScalarFieldEnum[] | SessionsScalarFieldEnum
    having?: SessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _avg?: SessionsAvgAggregateInputType
    _sum?: SessionsSumAggregateInputType
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }

  export type SessionsGroupByOutputType = {
    id: number
    titre: string
    description: string
    createdAt: Date
    updatedAt: Date
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId: number | null
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type SessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    duree?: boolean
    contacts?: boolean
    point?: boolean
    ressources?: boolean
    reunionId?: boolean
    Reunion?: boolean | Sessions$ReunionArgs<ExtArgs>
    appartenir?: boolean | Sessions$appartenirArgs<ExtArgs>
    connecter?: boolean | Sessions$connecterArgs<ExtArgs>
    _count?: boolean | SessionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessions"]>

  export type SessionsSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    duree?: boolean
    contacts?: boolean
    point?: boolean
    ressources?: boolean
    reunionId?: boolean
  }


  export type SessionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | Sessions$ReunionArgs<ExtArgs>
    appartenir?: boolean | Sessions$appartenirArgs<ExtArgs>
    connecter?: boolean | Sessions$connecterArgs<ExtArgs>
    _count?: boolean | SessionsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sessions"
    objects: {
      Reunion: Prisma.$ReunionPayload<ExtArgs>[]
      appartenir: Prisma.$AppartenirPayload<ExtArgs>[]
      connecter: Prisma.$ConnecterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      description: string
      createdAt: Date
      updatedAt: Date
      duree: string
      contacts: string
      point: number
      ressources: string
      reunionId: number | null
    }, ExtArgs["result"]["sessions"]>
    composites: {}
  }


  type SessionsGetPayload<S extends boolean | null | undefined | SessionsDefaultArgs> = $Result.GetResult<Prisma.$SessionsPayload, S>

  type SessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionsCountAggregateInputType | true
    }

  export interface SessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sessions'], meta: { name: 'Sessions' } }
    /**
     * Find zero or one Sessions that matches the filter.
     * @param {SessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionsFindUniqueOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsFindFirstArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionsWithIdOnly = await prisma.sessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sessions.
     * @param {SessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends SessionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsCreateArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionsCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const sessions = await prisma.sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {SessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends SessionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsDeleteArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sessions.
     * @param {SessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsUpdateArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {SessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends SessionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionsUpsertArgs<ExtArgs>>
    ): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionsCountArgs>(
      args?: Subset<T, SessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): Prisma.PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sessions model
   */
  readonly fields: SessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Reunion<T extends Sessions$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Sessions$ReunionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'> | Null>;

    appartenir<T extends Sessions$appartenirArgs<ExtArgs> = {}>(args?: Subset<T, Sessions$appartenirArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findMany'> | Null>;

    connecter<T extends Sessions$connecterArgs<ExtArgs> = {}>(args?: Subset<T, Sessions$connecterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sessions model
   */ 
  interface SessionsFieldRefs {
    readonly id: FieldRef<"Sessions", 'Int'>
    readonly titre: FieldRef<"Sessions", 'String'>
    readonly description: FieldRef<"Sessions", 'String'>
    readonly createdAt: FieldRef<"Sessions", 'DateTime'>
    readonly updatedAt: FieldRef<"Sessions", 'DateTime'>
    readonly duree: FieldRef<"Sessions", 'String'>
    readonly contacts: FieldRef<"Sessions", 'String'>
    readonly point: FieldRef<"Sessions", 'Int'>
    readonly ressources: FieldRef<"Sessions", 'String'>
    readonly reunionId: FieldRef<"Sessions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sessions findUnique
   */
  export type SessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions findUniqueOrThrow
   */
  export type SessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions findFirst
   */
  export type SessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions findFirstOrThrow
   */
  export type SessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions findMany
   */
  export type SessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions create
   */
  export type SessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Sessions.
     */
    data: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
  }

  /**
   * Sessions createMany
   */
  export type SessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionsCreateManyInput | SessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sessions update
   */
  export type SessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Sessions.
     */
    data: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
    /**
     * Choose, which Sessions to update.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions updateMany
   */
  export type SessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionsWhereInput
  }

  /**
   * Sessions upsert
   */
  export type SessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Sessions to update in case it exists.
     */
    where: SessionsWhereUniqueInput
    /**
     * In case the Sessions found by the `where` argument doesn't exist, create a new Sessions with this data.
     */
    create: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
    /**
     * In case the Sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
  }

  /**
   * Sessions delete
   */
  export type SessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    /**
     * Filter which Sessions to delete.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions deleteMany
   */
  export type SessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionsWhereInput
  }

  /**
   * Sessions.Reunion
   */
  export type Sessions$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    cursor?: ReunionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Sessions.appartenir
   */
  export type Sessions$appartenirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    where?: AppartenirWhereInput
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    cursor?: AppartenirWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppartenirScalarFieldEnum | AppartenirScalarFieldEnum[]
  }

  /**
   * Sessions.connecter
   */
  export type Sessions$connecterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    where?: ConnecterWhereInput
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    cursor?: ConnecterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnecterScalarFieldEnum | ConnecterScalarFieldEnum[]
  }

  /**
   * Sessions without action
   */
  export type SessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
  }


  /**
   * Model Appartenir
   */

  export type AggregateAppartenir = {
    _count: AppartenirCountAggregateOutputType | null
    _avg: AppartenirAvgAggregateOutputType | null
    _sum: AppartenirSumAggregateOutputType | null
    _min: AppartenirMinAggregateOutputType | null
    _max: AppartenirMaxAggregateOutputType | null
  }

  export type AppartenirAvgAggregateOutputType = {
    id: number | null
    reunionId: number | null
    sessionsId: number | null
  }

  export type AppartenirSumAggregateOutputType = {
    id: number | null
    reunionId: number | null
    sessionsId: number | null
  }

  export type AppartenirMinAggregateOutputType = {
    id: number | null
    reunionId: number | null
    sessionsId: number | null
  }

  export type AppartenirMaxAggregateOutputType = {
    id: number | null
    reunionId: number | null
    sessionsId: number | null
  }

  export type AppartenirCountAggregateOutputType = {
    id: number
    reunionId: number
    sessionsId: number
    _all: number
  }


  export type AppartenirAvgAggregateInputType = {
    id?: true
    reunionId?: true
    sessionsId?: true
  }

  export type AppartenirSumAggregateInputType = {
    id?: true
    reunionId?: true
    sessionsId?: true
  }

  export type AppartenirMinAggregateInputType = {
    id?: true
    reunionId?: true
    sessionsId?: true
  }

  export type AppartenirMaxAggregateInputType = {
    id?: true
    reunionId?: true
    sessionsId?: true
  }

  export type AppartenirCountAggregateInputType = {
    id?: true
    reunionId?: true
    sessionsId?: true
    _all?: true
  }

  export type AppartenirAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appartenir to aggregate.
     */
    where?: AppartenirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenirs to fetch.
     */
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppartenirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appartenirs
    **/
    _count?: true | AppartenirCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppartenirAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppartenirSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppartenirMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppartenirMaxAggregateInputType
  }

  export type GetAppartenirAggregateType<T extends AppartenirAggregateArgs> = {
        [P in keyof T & keyof AggregateAppartenir]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppartenir[P]>
      : GetScalarType<T[P], AggregateAppartenir[P]>
  }




  export type AppartenirGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenirWhereInput
    orderBy?: AppartenirOrderByWithAggregationInput | AppartenirOrderByWithAggregationInput[]
    by: AppartenirScalarFieldEnum[] | AppartenirScalarFieldEnum
    having?: AppartenirScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppartenirCountAggregateInputType | true
    _avg?: AppartenirAvgAggregateInputType
    _sum?: AppartenirSumAggregateInputType
    _min?: AppartenirMinAggregateInputType
    _max?: AppartenirMaxAggregateInputType
  }

  export type AppartenirGroupByOutputType = {
    id: number
    reunionId: number | null
    sessionsId: number | null
    _count: AppartenirCountAggregateOutputType | null
    _avg: AppartenirAvgAggregateOutputType | null
    _sum: AppartenirSumAggregateOutputType | null
    _min: AppartenirMinAggregateOutputType | null
    _max: AppartenirMaxAggregateOutputType | null
  }

  type GetAppartenirGroupByPayload<T extends AppartenirGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppartenirGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppartenirGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppartenirGroupByOutputType[P]>
            : GetScalarType<T[P], AppartenirGroupByOutputType[P]>
        }
      >
    >


  export type AppartenirSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reunionId?: boolean
    sessionsId?: boolean
    Reunion?: boolean | Appartenir$ReunionArgs<ExtArgs>
    Sessions?: boolean | Appartenir$SessionsArgs<ExtArgs>
  }, ExtArgs["result"]["appartenir"]>

  export type AppartenirSelectScalar = {
    id?: boolean
    reunionId?: boolean
    sessionsId?: boolean
  }


  export type AppartenirInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | Appartenir$ReunionArgs<ExtArgs>
    Sessions?: boolean | Appartenir$SessionsArgs<ExtArgs>
  }


  export type $AppartenirPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appartenir"
    objects: {
      Reunion: Prisma.$ReunionPayload<ExtArgs> | null
      Sessions: Prisma.$SessionsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reunionId: number | null
      sessionsId: number | null
    }, ExtArgs["result"]["appartenir"]>
    composites: {}
  }


  type AppartenirGetPayload<S extends boolean | null | undefined | AppartenirDefaultArgs> = $Result.GetResult<Prisma.$AppartenirPayload, S>

  type AppartenirCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppartenirFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppartenirCountAggregateInputType | true
    }

  export interface AppartenirDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appartenir'], meta: { name: 'Appartenir' } }
    /**
     * Find zero or one Appartenir that matches the filter.
     * @param {AppartenirFindUniqueArgs} args - Arguments to find a Appartenir
     * @example
     * // Get one Appartenir
     * const appartenir = await prisma.appartenir.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppartenirFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirFindUniqueArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Appartenir that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppartenirFindUniqueOrThrowArgs} args - Arguments to find a Appartenir
     * @example
     * // Get one Appartenir
     * const appartenir = await prisma.appartenir.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppartenirFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Appartenir that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirFindFirstArgs} args - Arguments to find a Appartenir
     * @example
     * // Get one Appartenir
     * const appartenir = await prisma.appartenir.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppartenirFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirFindFirstArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Appartenir that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirFindFirstOrThrowArgs} args - Arguments to find a Appartenir
     * @example
     * // Get one Appartenir
     * const appartenir = await prisma.appartenir.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppartenirFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Appartenirs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appartenirs
     * const appartenirs = await prisma.appartenir.findMany()
     * 
     * // Get first 10 Appartenirs
     * const appartenirs = await prisma.appartenir.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appartenirWithIdOnly = await prisma.appartenir.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppartenirFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Appartenir.
     * @param {AppartenirCreateArgs} args - Arguments to create a Appartenir.
     * @example
     * // Create one Appartenir
     * const Appartenir = await prisma.appartenir.create({
     *   data: {
     *     // ... data to create a Appartenir
     *   }
     * })
     * 
    **/
    create<T extends AppartenirCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirCreateArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Appartenirs.
     *     @param {AppartenirCreateManyArgs} args - Arguments to create many Appartenirs.
     *     @example
     *     // Create many Appartenirs
     *     const appartenir = await prisma.appartenir.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppartenirCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appartenir.
     * @param {AppartenirDeleteArgs} args - Arguments to delete one Appartenir.
     * @example
     * // Delete one Appartenir
     * const Appartenir = await prisma.appartenir.delete({
     *   where: {
     *     // ... filter to delete one Appartenir
     *   }
     * })
     * 
    **/
    delete<T extends AppartenirDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirDeleteArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Appartenir.
     * @param {AppartenirUpdateArgs} args - Arguments to update one Appartenir.
     * @example
     * // Update one Appartenir
     * const appartenir = await prisma.appartenir.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppartenirUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirUpdateArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Appartenirs.
     * @param {AppartenirDeleteManyArgs} args - Arguments to filter Appartenirs to delete.
     * @example
     * // Delete a few Appartenirs
     * const { count } = await prisma.appartenir.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppartenirDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppartenirDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appartenirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appartenirs
     * const appartenir = await prisma.appartenir.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppartenirUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appartenir.
     * @param {AppartenirUpsertArgs} args - Arguments to update or create a Appartenir.
     * @example
     * // Update or create a Appartenir
     * const appartenir = await prisma.appartenir.upsert({
     *   create: {
     *     // ... data to create a Appartenir
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appartenir we want to update
     *   }
     * })
    **/
    upsert<T extends AppartenirUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppartenirUpsertArgs<ExtArgs>>
    ): Prisma__AppartenirClient<$Result.GetResult<Prisma.$AppartenirPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Appartenirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirCountArgs} args - Arguments to filter Appartenirs to count.
     * @example
     * // Count the number of Appartenirs
     * const count = await prisma.appartenir.count({
     *   where: {
     *     // ... the filter for the Appartenirs we want to count
     *   }
     * })
    **/
    count<T extends AppartenirCountArgs>(
      args?: Subset<T, AppartenirCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppartenirCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appartenir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppartenirAggregateArgs>(args: Subset<T, AppartenirAggregateArgs>): Prisma.PrismaPromise<GetAppartenirAggregateType<T>>

    /**
     * Group by Appartenir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenirGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppartenirGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppartenirGroupByArgs['orderBy'] }
        : { orderBy?: AppartenirGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppartenirGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppartenirGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appartenir model
   */
  readonly fields: AppartenirFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appartenir.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppartenirClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Reunion<T extends Appartenir$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Appartenir$ReunionArgs<ExtArgs>>): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Sessions<T extends Appartenir$SessionsArgs<ExtArgs> = {}>(args?: Subset<T, Appartenir$SessionsArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Appartenir model
   */ 
  interface AppartenirFieldRefs {
    readonly id: FieldRef<"Appartenir", 'Int'>
    readonly reunionId: FieldRef<"Appartenir", 'Int'>
    readonly sessionsId: FieldRef<"Appartenir", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Appartenir findUnique
   */
  export type AppartenirFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter, which Appartenir to fetch.
     */
    where: AppartenirWhereUniqueInput
  }

  /**
   * Appartenir findUniqueOrThrow
   */
  export type AppartenirFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter, which Appartenir to fetch.
     */
    where: AppartenirWhereUniqueInput
  }

  /**
   * Appartenir findFirst
   */
  export type AppartenirFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter, which Appartenir to fetch.
     */
    where?: AppartenirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenirs to fetch.
     */
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appartenirs.
     */
    cursor?: AppartenirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appartenirs.
     */
    distinct?: AppartenirScalarFieldEnum | AppartenirScalarFieldEnum[]
  }

  /**
   * Appartenir findFirstOrThrow
   */
  export type AppartenirFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter, which Appartenir to fetch.
     */
    where?: AppartenirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenirs to fetch.
     */
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appartenirs.
     */
    cursor?: AppartenirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appartenirs.
     */
    distinct?: AppartenirScalarFieldEnum | AppartenirScalarFieldEnum[]
  }

  /**
   * Appartenir findMany
   */
  export type AppartenirFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter, which Appartenirs to fetch.
     */
    where?: AppartenirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenirs to fetch.
     */
    orderBy?: AppartenirOrderByWithRelationInput | AppartenirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appartenirs.
     */
    cursor?: AppartenirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenirs.
     */
    skip?: number
    distinct?: AppartenirScalarFieldEnum | AppartenirScalarFieldEnum[]
  }

  /**
   * Appartenir create
   */
  export type AppartenirCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * The data needed to create a Appartenir.
     */
    data?: XOR<AppartenirCreateInput, AppartenirUncheckedCreateInput>
  }

  /**
   * Appartenir createMany
   */
  export type AppartenirCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appartenirs.
     */
    data: AppartenirCreateManyInput | AppartenirCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appartenir update
   */
  export type AppartenirUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * The data needed to update a Appartenir.
     */
    data: XOR<AppartenirUpdateInput, AppartenirUncheckedUpdateInput>
    /**
     * Choose, which Appartenir to update.
     */
    where: AppartenirWhereUniqueInput
  }

  /**
   * Appartenir updateMany
   */
  export type AppartenirUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appartenirs.
     */
    data: XOR<AppartenirUpdateManyMutationInput, AppartenirUncheckedUpdateManyInput>
    /**
     * Filter which Appartenirs to update
     */
    where?: AppartenirWhereInput
  }

  /**
   * Appartenir upsert
   */
  export type AppartenirUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * The filter to search for the Appartenir to update in case it exists.
     */
    where: AppartenirWhereUniqueInput
    /**
     * In case the Appartenir found by the `where` argument doesn't exist, create a new Appartenir with this data.
     */
    create: XOR<AppartenirCreateInput, AppartenirUncheckedCreateInput>
    /**
     * In case the Appartenir was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppartenirUpdateInput, AppartenirUncheckedUpdateInput>
  }

  /**
   * Appartenir delete
   */
  export type AppartenirDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
    /**
     * Filter which Appartenir to delete.
     */
    where: AppartenirWhereUniqueInput
  }

  /**
   * Appartenir deleteMany
   */
  export type AppartenirDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appartenirs to delete
     */
    where?: AppartenirWhereInput
  }

  /**
   * Appartenir.Reunion
   */
  export type Appartenir$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
  }

  /**
   * Appartenir.Sessions
   */
  export type Appartenir$SessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    where?: SessionsWhereInput
  }

  /**
   * Appartenir without action
   */
  export type AppartenirDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenir
     */
    select?: AppartenirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenirInclude<ExtArgs> | null
  }


  /**
   * Model Connecter
   */

  export type AggregateConnecter = {
    _count: ConnecterCountAggregateOutputType | null
    _avg: ConnecterAvgAggregateOutputType | null
    _sum: ConnecterSumAggregateOutputType | null
    _min: ConnecterMinAggregateOutputType | null
    _max: ConnecterMaxAggregateOutputType | null
  }

  export type ConnecterAvgAggregateOutputType = {
    id: number | null
    sessionsId: number | null
    usersId: number | null
  }

  export type ConnecterSumAggregateOutputType = {
    id: number | null
    sessionsId: number | null
    usersId: number | null
  }

  export type ConnecterMinAggregateOutputType = {
    id: number | null
    sessionsId: number | null
    usersId: number | null
  }

  export type ConnecterMaxAggregateOutputType = {
    id: number | null
    sessionsId: number | null
    usersId: number | null
  }

  export type ConnecterCountAggregateOutputType = {
    id: number
    sessionsId: number
    usersId: number
    _all: number
  }


  export type ConnecterAvgAggregateInputType = {
    id?: true
    sessionsId?: true
    usersId?: true
  }

  export type ConnecterSumAggregateInputType = {
    id?: true
    sessionsId?: true
    usersId?: true
  }

  export type ConnecterMinAggregateInputType = {
    id?: true
    sessionsId?: true
    usersId?: true
  }

  export type ConnecterMaxAggregateInputType = {
    id?: true
    sessionsId?: true
    usersId?: true
  }

  export type ConnecterCountAggregateInputType = {
    id?: true
    sessionsId?: true
    usersId?: true
    _all?: true
  }

  export type ConnecterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connecter to aggregate.
     */
    where?: ConnecterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connecters to fetch.
     */
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConnecterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connecters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connecters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Connecters
    **/
    _count?: true | ConnecterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConnecterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConnecterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConnecterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConnecterMaxAggregateInputType
  }

  export type GetConnecterAggregateType<T extends ConnecterAggregateArgs> = {
        [P in keyof T & keyof AggregateConnecter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConnecter[P]>
      : GetScalarType<T[P], AggregateConnecter[P]>
  }




  export type ConnecterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnecterWhereInput
    orderBy?: ConnecterOrderByWithAggregationInput | ConnecterOrderByWithAggregationInput[]
    by: ConnecterScalarFieldEnum[] | ConnecterScalarFieldEnum
    having?: ConnecterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConnecterCountAggregateInputType | true
    _avg?: ConnecterAvgAggregateInputType
    _sum?: ConnecterSumAggregateInputType
    _min?: ConnecterMinAggregateInputType
    _max?: ConnecterMaxAggregateInputType
  }

  export type ConnecterGroupByOutputType = {
    id: number
    sessionsId: number | null
    usersId: number | null
    _count: ConnecterCountAggregateOutputType | null
    _avg: ConnecterAvgAggregateOutputType | null
    _sum: ConnecterSumAggregateOutputType | null
    _min: ConnecterMinAggregateOutputType | null
    _max: ConnecterMaxAggregateOutputType | null
  }

  type GetConnecterGroupByPayload<T extends ConnecterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConnecterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConnecterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConnecterGroupByOutputType[P]>
            : GetScalarType<T[P], ConnecterGroupByOutputType[P]>
        }
      >
    >


  export type ConnecterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionsId?: boolean
    usersId?: boolean
    Sessions?: boolean | Connecter$SessionsArgs<ExtArgs>
    Users?: boolean | Connecter$UsersArgs<ExtArgs>
  }, ExtArgs["result"]["connecter"]>

  export type ConnecterSelectScalar = {
    id?: boolean
    sessionsId?: boolean
    usersId?: boolean
  }


  export type ConnecterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sessions?: boolean | Connecter$SessionsArgs<ExtArgs>
    Users?: boolean | Connecter$UsersArgs<ExtArgs>
  }


  export type $ConnecterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Connecter"
    objects: {
      Sessions: Prisma.$SessionsPayload<ExtArgs> | null
      Users: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionsId: number | null
      usersId: number | null
    }, ExtArgs["result"]["connecter"]>
    composites: {}
  }


  type ConnecterGetPayload<S extends boolean | null | undefined | ConnecterDefaultArgs> = $Result.GetResult<Prisma.$ConnecterPayload, S>

  type ConnecterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConnecterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConnecterCountAggregateInputType | true
    }

  export interface ConnecterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Connecter'], meta: { name: 'Connecter' } }
    /**
     * Find zero or one Connecter that matches the filter.
     * @param {ConnecterFindUniqueArgs} args - Arguments to find a Connecter
     * @example
     * // Get one Connecter
     * const connecter = await prisma.connecter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConnecterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterFindUniqueArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Connecter that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConnecterFindUniqueOrThrowArgs} args - Arguments to find a Connecter
     * @example
     * // Get one Connecter
     * const connecter = await prisma.connecter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConnecterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Connecter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterFindFirstArgs} args - Arguments to find a Connecter
     * @example
     * // Get one Connecter
     * const connecter = await prisma.connecter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConnecterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterFindFirstArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Connecter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterFindFirstOrThrowArgs} args - Arguments to find a Connecter
     * @example
     * // Get one Connecter
     * const connecter = await prisma.connecter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConnecterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Connecters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Connecters
     * const connecters = await prisma.connecter.findMany()
     * 
     * // Get first 10 Connecters
     * const connecters = await prisma.connecter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const connecterWithIdOnly = await prisma.connecter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConnecterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Connecter.
     * @param {ConnecterCreateArgs} args - Arguments to create a Connecter.
     * @example
     * // Create one Connecter
     * const Connecter = await prisma.connecter.create({
     *   data: {
     *     // ... data to create a Connecter
     *   }
     * })
     * 
    **/
    create<T extends ConnecterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterCreateArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Connecters.
     *     @param {ConnecterCreateManyArgs} args - Arguments to create many Connecters.
     *     @example
     *     // Create many Connecters
     *     const connecter = await prisma.connecter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConnecterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Connecter.
     * @param {ConnecterDeleteArgs} args - Arguments to delete one Connecter.
     * @example
     * // Delete one Connecter
     * const Connecter = await prisma.connecter.delete({
     *   where: {
     *     // ... filter to delete one Connecter
     *   }
     * })
     * 
    **/
    delete<T extends ConnecterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterDeleteArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Connecter.
     * @param {ConnecterUpdateArgs} args - Arguments to update one Connecter.
     * @example
     * // Update one Connecter
     * const connecter = await prisma.connecter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConnecterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterUpdateArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Connecters.
     * @param {ConnecterDeleteManyArgs} args - Arguments to filter Connecters to delete.
     * @example
     * // Delete a few Connecters
     * const { count } = await prisma.connecter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConnecterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnecterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connecters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Connecters
     * const connecter = await prisma.connecter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConnecterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Connecter.
     * @param {ConnecterUpsertArgs} args - Arguments to update or create a Connecter.
     * @example
     * // Update or create a Connecter
     * const connecter = await prisma.connecter.upsert({
     *   create: {
     *     // ... data to create a Connecter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Connecter we want to update
     *   }
     * })
    **/
    upsert<T extends ConnecterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConnecterUpsertArgs<ExtArgs>>
    ): Prisma__ConnecterClient<$Result.GetResult<Prisma.$ConnecterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Connecters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterCountArgs} args - Arguments to filter Connecters to count.
     * @example
     * // Count the number of Connecters
     * const count = await prisma.connecter.count({
     *   where: {
     *     // ... the filter for the Connecters we want to count
     *   }
     * })
    **/
    count<T extends ConnecterCountArgs>(
      args?: Subset<T, ConnecterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConnecterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Connecter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConnecterAggregateArgs>(args: Subset<T, ConnecterAggregateArgs>): Prisma.PrismaPromise<GetConnecterAggregateType<T>>

    /**
     * Group by Connecter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnecterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConnecterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConnecterGroupByArgs['orderBy'] }
        : { orderBy?: ConnecterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConnecterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnecterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Connecter model
   */
  readonly fields: ConnecterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Connecter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConnecterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Sessions<T extends Connecter$SessionsArgs<ExtArgs> = {}>(args?: Subset<T, Connecter$SessionsArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Users<T extends Connecter$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Connecter$UsersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Connecter model
   */ 
  interface ConnecterFieldRefs {
    readonly id: FieldRef<"Connecter", 'Int'>
    readonly sessionsId: FieldRef<"Connecter", 'Int'>
    readonly usersId: FieldRef<"Connecter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Connecter findUnique
   */
  export type ConnecterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter, which Connecter to fetch.
     */
    where: ConnecterWhereUniqueInput
  }

  /**
   * Connecter findUniqueOrThrow
   */
  export type ConnecterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter, which Connecter to fetch.
     */
    where: ConnecterWhereUniqueInput
  }

  /**
   * Connecter findFirst
   */
  export type ConnecterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter, which Connecter to fetch.
     */
    where?: ConnecterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connecters to fetch.
     */
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connecters.
     */
    cursor?: ConnecterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connecters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connecters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connecters.
     */
    distinct?: ConnecterScalarFieldEnum | ConnecterScalarFieldEnum[]
  }

  /**
   * Connecter findFirstOrThrow
   */
  export type ConnecterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter, which Connecter to fetch.
     */
    where?: ConnecterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connecters to fetch.
     */
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connecters.
     */
    cursor?: ConnecterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connecters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connecters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connecters.
     */
    distinct?: ConnecterScalarFieldEnum | ConnecterScalarFieldEnum[]
  }

  /**
   * Connecter findMany
   */
  export type ConnecterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter, which Connecters to fetch.
     */
    where?: ConnecterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connecters to fetch.
     */
    orderBy?: ConnecterOrderByWithRelationInput | ConnecterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Connecters.
     */
    cursor?: ConnecterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connecters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connecters.
     */
    skip?: number
    distinct?: ConnecterScalarFieldEnum | ConnecterScalarFieldEnum[]
  }

  /**
   * Connecter create
   */
  export type ConnecterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * The data needed to create a Connecter.
     */
    data?: XOR<ConnecterCreateInput, ConnecterUncheckedCreateInput>
  }

  /**
   * Connecter createMany
   */
  export type ConnecterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Connecters.
     */
    data: ConnecterCreateManyInput | ConnecterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Connecter update
   */
  export type ConnecterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * The data needed to update a Connecter.
     */
    data: XOR<ConnecterUpdateInput, ConnecterUncheckedUpdateInput>
    /**
     * Choose, which Connecter to update.
     */
    where: ConnecterWhereUniqueInput
  }

  /**
   * Connecter updateMany
   */
  export type ConnecterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Connecters.
     */
    data: XOR<ConnecterUpdateManyMutationInput, ConnecterUncheckedUpdateManyInput>
    /**
     * Filter which Connecters to update
     */
    where?: ConnecterWhereInput
  }

  /**
   * Connecter upsert
   */
  export type ConnecterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * The filter to search for the Connecter to update in case it exists.
     */
    where: ConnecterWhereUniqueInput
    /**
     * In case the Connecter found by the `where` argument doesn't exist, create a new Connecter with this data.
     */
    create: XOR<ConnecterCreateInput, ConnecterUncheckedCreateInput>
    /**
     * In case the Connecter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConnecterUpdateInput, ConnecterUncheckedUpdateInput>
  }

  /**
   * Connecter delete
   */
  export type ConnecterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
    /**
     * Filter which Connecter to delete.
     */
    where: ConnecterWhereUniqueInput
  }

  /**
   * Connecter deleteMany
   */
  export type ConnecterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connecters to delete
     */
    where?: ConnecterWhereInput
  }

  /**
   * Connecter.Sessions
   */
  export type Connecter$SessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionsInclude<ExtArgs> | null
    where?: SessionsWhereInput
  }

  /**
   * Connecter.Users
   */
  export type Connecter$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Connecter without action
   */
  export type ConnecterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connecter
     */
    select?: ConnecterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnecterInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    prenom: 'prenom',
    nom: 'nom',
    email: 'email',
    password: 'password',
    pays: 'pays',
    ville: 'ville',
    tel: 'tel',
    age: 'age',
    avatar: 'avatar',
    thematique: 'thematique',
    cursus: 'cursus',
    nomDiplome: 'nomDiplome',
    anneeDiplome: 'anneeDiplome',
    etablissementDobtention: 'etablissementDobtention',
    filiere: 'filiere',
    secteurDactivite: 'secteurDactivite',
    intitulerDePoste: 'intitulerDePoste',
    entreprise: 'entreprise',
    objectifProfessionelle: 'objectifProfessionelle',
    competenceAdevelopper: 'competenceAdevelopper',
    interets: 'interets',
    domaineDeMentorate: 'domaineDeMentorate',
    domaineDexpertise: 'domaineDexpertise',
    url: 'url',
    reunionId: 'reunionId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    usersId: 'usersId'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const ReunionScalarFieldEnum: {
    id: 'id',
    sujet: 'sujet',
    date: 'date',
    duree: 'duree',
    lieu: 'lieu',
    usersId: 'usersId'
  };

  export type ReunionScalarFieldEnum = (typeof ReunionScalarFieldEnum)[keyof typeof ReunionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    usersId: 'usersId',
    reunionId: 'reunionId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    duree: 'duree',
    contacts: 'contacts',
    point: 'point',
    ressources: 'ressources',
    reunionId: 'reunionId'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const AppartenirScalarFieldEnum: {
    id: 'id',
    reunionId: 'reunionId',
    sessionsId: 'sessionsId'
  };

  export type AppartenirScalarFieldEnum = (typeof AppartenirScalarFieldEnum)[keyof typeof AppartenirScalarFieldEnum]


  export const ConnecterScalarFieldEnum: {
    id: 'id',
    sessionsId: 'sessionsId',
    usersId: 'usersId'
  };

  export type ConnecterScalarFieldEnum = (typeof ConnecterScalarFieldEnum)[keyof typeof ConnecterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    prenom?: StringFilter<"Users"> | string
    nom?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    pays?: StringFilter<"Users"> | string
    ville?: StringFilter<"Users"> | string
    tel?: StringFilter<"Users"> | string
    age?: IntFilter<"Users"> | number
    avatar?: BytesNullableFilter<"Users"> | Buffer | null
    thematique?: StringNullableFilter<"Users"> | string | null
    cursus?: StringNullableFilter<"Users"> | string | null
    nomDiplome?: StringNullableFilter<"Users"> | string | null
    anneeDiplome?: IntNullableFilter<"Users"> | number | null
    etablissementDobtention?: StringNullableFilter<"Users"> | string | null
    filiere?: StringNullableFilter<"Users"> | string | null
    secteurDactivite?: StringNullableFilter<"Users"> | string | null
    intitulerDePoste?: StringNullableFilter<"Users"> | string | null
    entreprise?: StringNullableFilter<"Users"> | string | null
    objectifProfessionelle?: StringNullableFilter<"Users"> | string | null
    competenceAdevelopper?: StringNullableFilter<"Users"> | string | null
    interets?: StringNullableFilter<"Users"> | string | null
    domaineDeMentorate?: StringNullableFilter<"Users"> | string | null
    domaineDexpertise?: StringNullableFilter<"Users"> | string | null
    url?: StringNullableFilter<"Users"> | string | null
    reunionId?: IntNullableFilter<"Users"> | number | null
    Role?: RoleListRelationFilter
    Reunion?: ReunionListRelationFilter
    message?: MessageListRelationFilter
    connecter?: ConnecterListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pays?: SortOrder
    ville?: SortOrder
    tel?: SortOrder
    age?: SortOrder
    avatar?: SortOrderInput | SortOrder
    thematique?: SortOrderInput | SortOrder
    cursus?: SortOrderInput | SortOrder
    nomDiplome?: SortOrderInput | SortOrder
    anneeDiplome?: SortOrderInput | SortOrder
    etablissementDobtention?: SortOrderInput | SortOrder
    filiere?: SortOrderInput | SortOrder
    secteurDactivite?: SortOrderInput | SortOrder
    intitulerDePoste?: SortOrderInput | SortOrder
    entreprise?: SortOrderInput | SortOrder
    objectifProfessionelle?: SortOrderInput | SortOrder
    competenceAdevelopper?: SortOrderInput | SortOrder
    interets?: SortOrderInput | SortOrder
    domaineDeMentorate?: SortOrderInput | SortOrder
    domaineDexpertise?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    reunionId?: SortOrderInput | SortOrder
    Role?: RoleOrderByRelationAggregateInput
    Reunion?: ReunionOrderByRelationAggregateInput
    message?: MessageOrderByRelationAggregateInput
    connecter?: ConnecterOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    prenom?: StringFilter<"Users"> | string
    nom?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    pays?: StringFilter<"Users"> | string
    ville?: StringFilter<"Users"> | string
    tel?: StringFilter<"Users"> | string
    age?: IntFilter<"Users"> | number
    avatar?: BytesNullableFilter<"Users"> | Buffer | null
    thematique?: StringNullableFilter<"Users"> | string | null
    cursus?: StringNullableFilter<"Users"> | string | null
    nomDiplome?: StringNullableFilter<"Users"> | string | null
    anneeDiplome?: IntNullableFilter<"Users"> | number | null
    etablissementDobtention?: StringNullableFilter<"Users"> | string | null
    filiere?: StringNullableFilter<"Users"> | string | null
    secteurDactivite?: StringNullableFilter<"Users"> | string | null
    intitulerDePoste?: StringNullableFilter<"Users"> | string | null
    entreprise?: StringNullableFilter<"Users"> | string | null
    objectifProfessionelle?: StringNullableFilter<"Users"> | string | null
    competenceAdevelopper?: StringNullableFilter<"Users"> | string | null
    interets?: StringNullableFilter<"Users"> | string | null
    domaineDeMentorate?: StringNullableFilter<"Users"> | string | null
    domaineDexpertise?: StringNullableFilter<"Users"> | string | null
    url?: StringNullableFilter<"Users"> | string | null
    reunionId?: IntNullableFilter<"Users"> | number | null
    Role?: RoleListRelationFilter
    Reunion?: ReunionListRelationFilter
    message?: MessageListRelationFilter
    connecter?: ConnecterListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pays?: SortOrder
    ville?: SortOrder
    tel?: SortOrder
    age?: SortOrder
    avatar?: SortOrderInput | SortOrder
    thematique?: SortOrderInput | SortOrder
    cursus?: SortOrderInput | SortOrder
    nomDiplome?: SortOrderInput | SortOrder
    anneeDiplome?: SortOrderInput | SortOrder
    etablissementDobtention?: SortOrderInput | SortOrder
    filiere?: SortOrderInput | SortOrder
    secteurDactivite?: SortOrderInput | SortOrder
    intitulerDePoste?: SortOrderInput | SortOrder
    entreprise?: SortOrderInput | SortOrder
    objectifProfessionelle?: SortOrderInput | SortOrder
    competenceAdevelopper?: SortOrderInput | SortOrder
    interets?: SortOrderInput | SortOrder
    domaineDeMentorate?: SortOrderInput | SortOrder
    domaineDexpertise?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    reunionId?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    prenom?: StringWithAggregatesFilter<"Users"> | string
    nom?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    pays?: StringWithAggregatesFilter<"Users"> | string
    ville?: StringWithAggregatesFilter<"Users"> | string
    tel?: StringWithAggregatesFilter<"Users"> | string
    age?: IntWithAggregatesFilter<"Users"> | number
    avatar?: BytesNullableWithAggregatesFilter<"Users"> | Buffer | null
    thematique?: StringNullableWithAggregatesFilter<"Users"> | string | null
    cursus?: StringNullableWithAggregatesFilter<"Users"> | string | null
    nomDiplome?: StringNullableWithAggregatesFilter<"Users"> | string | null
    anneeDiplome?: IntNullableWithAggregatesFilter<"Users"> | number | null
    etablissementDobtention?: StringNullableWithAggregatesFilter<"Users"> | string | null
    filiere?: StringNullableWithAggregatesFilter<"Users"> | string | null
    secteurDactivite?: StringNullableWithAggregatesFilter<"Users"> | string | null
    intitulerDePoste?: StringNullableWithAggregatesFilter<"Users"> | string | null
    entreprise?: StringNullableWithAggregatesFilter<"Users"> | string | null
    objectifProfessionelle?: StringNullableWithAggregatesFilter<"Users"> | string | null
    competenceAdevelopper?: StringNullableWithAggregatesFilter<"Users"> | string | null
    interets?: StringNullableWithAggregatesFilter<"Users"> | string | null
    domaineDeMentorate?: StringNullableWithAggregatesFilter<"Users"> | string | null
    domaineDexpertise?: StringNullableWithAggregatesFilter<"Users"> | string | null
    url?: StringNullableWithAggregatesFilter<"Users"> | string | null
    reunionId?: IntNullableWithAggregatesFilter<"Users"> | number | null
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    nom?: StringFilter<"Role"> | string
    usersId?: IntFilter<"Role"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    nom?: StringFilter<"Role"> | string
    usersId?: IntFilter<"Role"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    usersId?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    nom?: StringWithAggregatesFilter<"Role"> | string
    usersId?: IntWithAggregatesFilter<"Role"> | number
  }

  export type ReunionWhereInput = {
    AND?: ReunionWhereInput | ReunionWhereInput[]
    OR?: ReunionWhereInput[]
    NOT?: ReunionWhereInput | ReunionWhereInput[]
    id?: IntFilter<"Reunion"> | number
    sujet?: StringFilter<"Reunion"> | string
    date?: IntFilter<"Reunion"> | number
    duree?: StringNullableFilter<"Reunion"> | string | null
    lieu?: StringFilter<"Reunion"> | string
    usersId?: IntFilter<"Reunion"> | number
    users?: UsersListRelationFilter
    message?: MessageListRelationFilter
    session?: SessionsListRelationFilter
    appartenir?: AppartenirListRelationFilter
  }

  export type ReunionOrderByWithRelationInput = {
    id?: SortOrder
    sujet?: SortOrder
    date?: SortOrder
    duree?: SortOrderInput | SortOrder
    lieu?: SortOrder
    usersId?: SortOrder
    users?: UsersOrderByRelationAggregateInput
    message?: MessageOrderByRelationAggregateInput
    session?: SessionsOrderByRelationAggregateInput
    appartenir?: AppartenirOrderByRelationAggregateInput
  }

  export type ReunionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReunionWhereInput | ReunionWhereInput[]
    OR?: ReunionWhereInput[]
    NOT?: ReunionWhereInput | ReunionWhereInput[]
    sujet?: StringFilter<"Reunion"> | string
    date?: IntFilter<"Reunion"> | number
    duree?: StringNullableFilter<"Reunion"> | string | null
    lieu?: StringFilter<"Reunion"> | string
    usersId?: IntFilter<"Reunion"> | number
    users?: UsersListRelationFilter
    message?: MessageListRelationFilter
    session?: SessionsListRelationFilter
    appartenir?: AppartenirListRelationFilter
  }, "id">

  export type ReunionOrderByWithAggregationInput = {
    id?: SortOrder
    sujet?: SortOrder
    date?: SortOrder
    duree?: SortOrderInput | SortOrder
    lieu?: SortOrder
    usersId?: SortOrder
    _count?: ReunionCountOrderByAggregateInput
    _avg?: ReunionAvgOrderByAggregateInput
    _max?: ReunionMaxOrderByAggregateInput
    _min?: ReunionMinOrderByAggregateInput
    _sum?: ReunionSumOrderByAggregateInput
  }

  export type ReunionScalarWhereWithAggregatesInput = {
    AND?: ReunionScalarWhereWithAggregatesInput | ReunionScalarWhereWithAggregatesInput[]
    OR?: ReunionScalarWhereWithAggregatesInput[]
    NOT?: ReunionScalarWhereWithAggregatesInput | ReunionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reunion"> | number
    sujet?: StringWithAggregatesFilter<"Reunion"> | string
    date?: IntWithAggregatesFilter<"Reunion"> | number
    duree?: StringNullableWithAggregatesFilter<"Reunion"> | string | null
    lieu?: StringWithAggregatesFilter<"Reunion"> | string
    usersId?: IntWithAggregatesFilter<"Reunion"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    usersId?: IntNullableFilter<"Message"> | number | null
    reunionId?: IntNullableFilter<"Message"> | number | null
    Users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
    Reunion?: XOR<ReunionNullableRelationFilter, ReunionWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    usersId?: SortOrderInput | SortOrder
    reunionId?: SortOrderInput | SortOrder
    Users?: UsersOrderByWithRelationInput
    Reunion?: ReunionOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    usersId?: IntNullableFilter<"Message"> | number | null
    reunionId?: IntNullableFilter<"Message"> | number | null
    Users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
    Reunion?: XOR<ReunionNullableRelationFilter, ReunionWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    usersId?: SortOrderInput | SortOrder
    reunionId?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
    usersId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    reunionId?: IntNullableWithAggregatesFilter<"Message"> | number | null
  }

  export type SessionsWhereInput = {
    AND?: SessionsWhereInput | SessionsWhereInput[]
    OR?: SessionsWhereInput[]
    NOT?: SessionsWhereInput | SessionsWhereInput[]
    id?: IntFilter<"Sessions"> | number
    titre?: StringFilter<"Sessions"> | string
    description?: StringFilter<"Sessions"> | string
    createdAt?: DateTimeFilter<"Sessions"> | Date | string
    updatedAt?: DateTimeFilter<"Sessions"> | Date | string
    duree?: StringFilter<"Sessions"> | string
    contacts?: StringFilter<"Sessions"> | string
    point?: IntFilter<"Sessions"> | number
    ressources?: StringFilter<"Sessions"> | string
    reunionId?: IntNullableFilter<"Sessions"> | number | null
    Reunion?: ReunionListRelationFilter
    appartenir?: AppartenirListRelationFilter
    connecter?: ConnecterListRelationFilter
  }

  export type SessionsOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    duree?: SortOrder
    contacts?: SortOrder
    point?: SortOrder
    ressources?: SortOrder
    reunionId?: SortOrderInput | SortOrder
    Reunion?: ReunionOrderByRelationAggregateInput
    appartenir?: AppartenirOrderByRelationAggregateInput
    connecter?: ConnecterOrderByRelationAggregateInput
  }

  export type SessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionsWhereInput | SessionsWhereInput[]
    OR?: SessionsWhereInput[]
    NOT?: SessionsWhereInput | SessionsWhereInput[]
    titre?: StringFilter<"Sessions"> | string
    description?: StringFilter<"Sessions"> | string
    createdAt?: DateTimeFilter<"Sessions"> | Date | string
    updatedAt?: DateTimeFilter<"Sessions"> | Date | string
    duree?: StringFilter<"Sessions"> | string
    contacts?: StringFilter<"Sessions"> | string
    point?: IntFilter<"Sessions"> | number
    ressources?: StringFilter<"Sessions"> | string
    reunionId?: IntNullableFilter<"Sessions"> | number | null
    Reunion?: ReunionListRelationFilter
    appartenir?: AppartenirListRelationFilter
    connecter?: ConnecterListRelationFilter
  }, "id">

  export type SessionsOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    duree?: SortOrder
    contacts?: SortOrder
    point?: SortOrder
    ressources?: SortOrder
    reunionId?: SortOrderInput | SortOrder
    _count?: SessionsCountOrderByAggregateInput
    _avg?: SessionsAvgOrderByAggregateInput
    _max?: SessionsMaxOrderByAggregateInput
    _min?: SessionsMinOrderByAggregateInput
    _sum?: SessionsSumOrderByAggregateInput
  }

  export type SessionsScalarWhereWithAggregatesInput = {
    AND?: SessionsScalarWhereWithAggregatesInput | SessionsScalarWhereWithAggregatesInput[]
    OR?: SessionsScalarWhereWithAggregatesInput[]
    NOT?: SessionsScalarWhereWithAggregatesInput | SessionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sessions"> | number
    titre?: StringWithAggregatesFilter<"Sessions"> | string
    description?: StringWithAggregatesFilter<"Sessions"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sessions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sessions"> | Date | string
    duree?: StringWithAggregatesFilter<"Sessions"> | string
    contacts?: StringWithAggregatesFilter<"Sessions"> | string
    point?: IntWithAggregatesFilter<"Sessions"> | number
    ressources?: StringWithAggregatesFilter<"Sessions"> | string
    reunionId?: IntNullableWithAggregatesFilter<"Sessions"> | number | null
  }

  export type AppartenirWhereInput = {
    AND?: AppartenirWhereInput | AppartenirWhereInput[]
    OR?: AppartenirWhereInput[]
    NOT?: AppartenirWhereInput | AppartenirWhereInput[]
    id?: IntFilter<"Appartenir"> | number
    reunionId?: IntNullableFilter<"Appartenir"> | number | null
    sessionsId?: IntNullableFilter<"Appartenir"> | number | null
    Reunion?: XOR<ReunionNullableRelationFilter, ReunionWhereInput> | null
    Sessions?: XOR<SessionsNullableRelationFilter, SessionsWhereInput> | null
  }

  export type AppartenirOrderByWithRelationInput = {
    id?: SortOrder
    reunionId?: SortOrderInput | SortOrder
    sessionsId?: SortOrderInput | SortOrder
    Reunion?: ReunionOrderByWithRelationInput
    Sessions?: SessionsOrderByWithRelationInput
  }

  export type AppartenirWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppartenirWhereInput | AppartenirWhereInput[]
    OR?: AppartenirWhereInput[]
    NOT?: AppartenirWhereInput | AppartenirWhereInput[]
    reunionId?: IntNullableFilter<"Appartenir"> | number | null
    sessionsId?: IntNullableFilter<"Appartenir"> | number | null
    Reunion?: XOR<ReunionNullableRelationFilter, ReunionWhereInput> | null
    Sessions?: XOR<SessionsNullableRelationFilter, SessionsWhereInput> | null
  }, "id">

  export type AppartenirOrderByWithAggregationInput = {
    id?: SortOrder
    reunionId?: SortOrderInput | SortOrder
    sessionsId?: SortOrderInput | SortOrder
    _count?: AppartenirCountOrderByAggregateInput
    _avg?: AppartenirAvgOrderByAggregateInput
    _max?: AppartenirMaxOrderByAggregateInput
    _min?: AppartenirMinOrderByAggregateInput
    _sum?: AppartenirSumOrderByAggregateInput
  }

  export type AppartenirScalarWhereWithAggregatesInput = {
    AND?: AppartenirScalarWhereWithAggregatesInput | AppartenirScalarWhereWithAggregatesInput[]
    OR?: AppartenirScalarWhereWithAggregatesInput[]
    NOT?: AppartenirScalarWhereWithAggregatesInput | AppartenirScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appartenir"> | number
    reunionId?: IntNullableWithAggregatesFilter<"Appartenir"> | number | null
    sessionsId?: IntNullableWithAggregatesFilter<"Appartenir"> | number | null
  }

  export type ConnecterWhereInput = {
    AND?: ConnecterWhereInput | ConnecterWhereInput[]
    OR?: ConnecterWhereInput[]
    NOT?: ConnecterWhereInput | ConnecterWhereInput[]
    id?: IntFilter<"Connecter"> | number
    sessionsId?: IntNullableFilter<"Connecter"> | number | null
    usersId?: IntNullableFilter<"Connecter"> | number | null
    Sessions?: XOR<SessionsNullableRelationFilter, SessionsWhereInput> | null
    Users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type ConnecterOrderByWithRelationInput = {
    id?: SortOrder
    sessionsId?: SortOrderInput | SortOrder
    usersId?: SortOrderInput | SortOrder
    Sessions?: SessionsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type ConnecterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConnecterWhereInput | ConnecterWhereInput[]
    OR?: ConnecterWhereInput[]
    NOT?: ConnecterWhereInput | ConnecterWhereInput[]
    sessionsId?: IntNullableFilter<"Connecter"> | number | null
    usersId?: IntNullableFilter<"Connecter"> | number | null
    Sessions?: XOR<SessionsNullableRelationFilter, SessionsWhereInput> | null
    Users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id">

  export type ConnecterOrderByWithAggregationInput = {
    id?: SortOrder
    sessionsId?: SortOrderInput | SortOrder
    usersId?: SortOrderInput | SortOrder
    _count?: ConnecterCountOrderByAggregateInput
    _avg?: ConnecterAvgOrderByAggregateInput
    _max?: ConnecterMaxOrderByAggregateInput
    _min?: ConnecterMinOrderByAggregateInput
    _sum?: ConnecterSumOrderByAggregateInput
  }

  export type ConnecterScalarWhereWithAggregatesInput = {
    AND?: ConnecterScalarWhereWithAggregatesInput | ConnecterScalarWhereWithAggregatesInput[]
    OR?: ConnecterScalarWhereWithAggregatesInput[]
    NOT?: ConnecterScalarWhereWithAggregatesInput | ConnecterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Connecter"> | number
    sessionsId?: IntNullableWithAggregatesFilter<"Connecter"> | number | null
    usersId?: IntNullableWithAggregatesFilter<"Connecter"> | number | null
  }

  export type UsersCreateInput = {
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleCreateNestedManyWithoutUserInput
    Reunion?: ReunionCreateNestedManyWithoutUsersInput
    message?: MessageCreateNestedManyWithoutUsersInput
    connecter?: ConnecterCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Reunion?: ReunionUncheckedCreateNestedManyWithoutUsersInput
    message?: MessageUncheckedCreateNestedManyWithoutUsersInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUpdateManyWithoutUsersNestedInput
    message?: MessageUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUncheckedUpdateManyWithoutUsersNestedInput
    message?: MessageUncheckedUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
  }

  export type UsersUpdateManyMutationInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoleCreateInput = {
    nom: string
    user: UsersCreateNestedOneWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    nom: string
    usersId: number
  }

  export type RoleUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateManyInput = {
    id?: number
    nom: string
    usersId: number
  }

  export type RoleUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionCreateInput = {
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersCreateNestedManyWithoutReunionInput
    message?: MessageCreateNestedManyWithoutReunionInput
    session?: SessionsCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirCreateNestedManyWithoutReunionInput
  }

  export type ReunionUncheckedCreateInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersUncheckedCreateNestedManyWithoutReunionInput
    message?: MessageUncheckedCreateNestedManyWithoutReunionInput
    session?: SessionsUncheckedCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutReunionInput
  }

  export type ReunionUpdateInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateManyWithoutReunionNestedInput
    message?: MessageUpdateManyWithoutReunionNestedInput
    session?: SessionsUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUncheckedUpdateManyWithoutReunionNestedInput
    message?: MessageUncheckedUpdateManyWithoutReunionNestedInput
    session?: SessionsUncheckedUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutReunionNestedInput
  }

  export type ReunionCreateManyInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
  }

  export type ReunionUpdateManyMutationInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    content: string
    Users?: UsersCreateNestedOneWithoutMessageInput
    Reunion?: ReunionCreateNestedOneWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    content: string
    usersId?: number | null
    reunionId?: number | null
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateOneWithoutMessageNestedInput
    Reunion?: ReunionUpdateOneWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageCreateManyInput = {
    id?: number
    content: string
    usersId?: number | null
    reunionId?: number | null
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionsCreateInput = {
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionCreateNestedManyWithoutSessionInput
    appartenir?: AppartenirCreateNestedManyWithoutSessionsInput
    connecter?: ConnecterCreateNestedManyWithoutSessionsInput
  }

  export type SessionsUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionUncheckedCreateNestedManyWithoutSessionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutSessionsInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutSessionsInput
  }

  export type SessionsUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUpdateManyWithoutSessionNestedInput
    appartenir?: AppartenirUpdateManyWithoutSessionsNestedInput
    connecter?: ConnecterUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUncheckedUpdateManyWithoutSessionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutSessionsNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsCreateManyInput = {
    id?: number
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
  }

  export type SessionsUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirCreateInput = {
    Reunion?: ReunionCreateNestedOneWithoutAppartenirInput
    Sessions?: SessionsCreateNestedOneWithoutAppartenirInput
  }

  export type AppartenirUncheckedCreateInput = {
    id?: number
    reunionId?: number | null
    sessionsId?: number | null
  }

  export type AppartenirUpdateInput = {
    Reunion?: ReunionUpdateOneWithoutAppartenirNestedInput
    Sessions?: SessionsUpdateOneWithoutAppartenirNestedInput
  }

  export type AppartenirUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirCreateManyInput = {
    id?: number
    reunionId?: number | null
    sessionsId?: number | null
  }

  export type AppartenirUpdateManyMutationInput = {

  }

  export type AppartenirUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterCreateInput = {
    Sessions?: SessionsCreateNestedOneWithoutConnecterInput
    Users?: UsersCreateNestedOneWithoutConnecterInput
  }

  export type ConnecterUncheckedCreateInput = {
    id?: number
    sessionsId?: number | null
    usersId?: number | null
  }

  export type ConnecterUpdateInput = {
    Sessions?: SessionsUpdateOneWithoutConnecterNestedInput
    Users?: UsersUpdateOneWithoutConnecterNestedInput
  }

  export type ConnecterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterCreateManyInput = {
    id?: number
    sessionsId?: number | null
    usersId?: number | null
  }

  export type ConnecterUpdateManyMutationInput = {

  }

  export type ConnecterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type ReunionListRelationFilter = {
    every?: ReunionWhereInput
    some?: ReunionWhereInput
    none?: ReunionWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ConnecterListRelationFilter = {
    every?: ConnecterWhereInput
    some?: ConnecterWhereInput
    none?: ConnecterWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReunionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConnecterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pays?: SortOrder
    ville?: SortOrder
    tel?: SortOrder
    age?: SortOrder
    avatar?: SortOrder
    thematique?: SortOrder
    cursus?: SortOrder
    nomDiplome?: SortOrder
    anneeDiplome?: SortOrder
    etablissementDobtention?: SortOrder
    filiere?: SortOrder
    secteurDactivite?: SortOrder
    intitulerDePoste?: SortOrder
    entreprise?: SortOrder
    objectifProfessionelle?: SortOrder
    competenceAdevelopper?: SortOrder
    interets?: SortOrder
    domaineDeMentorate?: SortOrder
    domaineDexpertise?: SortOrder
    url?: SortOrder
    reunionId?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    anneeDiplome?: SortOrder
    reunionId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pays?: SortOrder
    ville?: SortOrder
    tel?: SortOrder
    age?: SortOrder
    avatar?: SortOrder
    thematique?: SortOrder
    cursus?: SortOrder
    nomDiplome?: SortOrder
    anneeDiplome?: SortOrder
    etablissementDobtention?: SortOrder
    filiere?: SortOrder
    secteurDactivite?: SortOrder
    intitulerDePoste?: SortOrder
    entreprise?: SortOrder
    objectifProfessionelle?: SortOrder
    competenceAdevelopper?: SortOrder
    interets?: SortOrder
    domaineDeMentorate?: SortOrder
    domaineDexpertise?: SortOrder
    url?: SortOrder
    reunionId?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pays?: SortOrder
    ville?: SortOrder
    tel?: SortOrder
    age?: SortOrder
    avatar?: SortOrder
    thematique?: SortOrder
    cursus?: SortOrder
    nomDiplome?: SortOrder
    anneeDiplome?: SortOrder
    etablissementDobtention?: SortOrder
    filiere?: SortOrder
    secteurDactivite?: SortOrder
    intitulerDePoste?: SortOrder
    entreprise?: SortOrder
    objectifProfessionelle?: SortOrder
    competenceAdevelopper?: SortOrder
    interets?: SortOrder
    domaineDeMentorate?: SortOrder
    domaineDexpertise?: SortOrder
    url?: SortOrder
    reunionId?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    anneeDiplome?: SortOrder
    reunionId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    usersId?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    usersId?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    usersId?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type SessionsListRelationFilter = {
    every?: SessionsWhereInput
    some?: SessionsWhereInput
    none?: SessionsWhereInput
  }

  export type AppartenirListRelationFilter = {
    every?: AppartenirWhereInput
    some?: AppartenirWhereInput
    none?: AppartenirWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppartenirOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReunionCountOrderByAggregateInput = {
    id?: SortOrder
    sujet?: SortOrder
    date?: SortOrder
    duree?: SortOrder
    lieu?: SortOrder
    usersId?: SortOrder
  }

  export type ReunionAvgOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    usersId?: SortOrder
  }

  export type ReunionMaxOrderByAggregateInput = {
    id?: SortOrder
    sujet?: SortOrder
    date?: SortOrder
    duree?: SortOrder
    lieu?: SortOrder
    usersId?: SortOrder
  }

  export type ReunionMinOrderByAggregateInput = {
    id?: SortOrder
    sujet?: SortOrder
    date?: SortOrder
    duree?: SortOrder
    lieu?: SortOrder
    usersId?: SortOrder
  }

  export type ReunionSumOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    usersId?: SortOrder
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type ReunionNullableRelationFilter = {
    is?: ReunionWhereInput | null
    isNot?: ReunionWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    usersId?: SortOrder
    reunionId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    reunionId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    usersId?: SortOrder
    reunionId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    usersId?: SortOrder
    reunionId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    reunionId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionsCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    duree?: SortOrder
    contacts?: SortOrder
    point?: SortOrder
    ressources?: SortOrder
    reunionId?: SortOrder
  }

  export type SessionsAvgOrderByAggregateInput = {
    id?: SortOrder
    point?: SortOrder
    reunionId?: SortOrder
  }

  export type SessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    duree?: SortOrder
    contacts?: SortOrder
    point?: SortOrder
    ressources?: SortOrder
    reunionId?: SortOrder
  }

  export type SessionsMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    duree?: SortOrder
    contacts?: SortOrder
    point?: SortOrder
    ressources?: SortOrder
    reunionId?: SortOrder
  }

  export type SessionsSumOrderByAggregateInput = {
    id?: SortOrder
    point?: SortOrder
    reunionId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SessionsNullableRelationFilter = {
    is?: SessionsWhereInput | null
    isNot?: SessionsWhereInput | null
  }

  export type AppartenirCountOrderByAggregateInput = {
    id?: SortOrder
    reunionId?: SortOrder
    sessionsId?: SortOrder
  }

  export type AppartenirAvgOrderByAggregateInput = {
    id?: SortOrder
    reunionId?: SortOrder
    sessionsId?: SortOrder
  }

  export type AppartenirMaxOrderByAggregateInput = {
    id?: SortOrder
    reunionId?: SortOrder
    sessionsId?: SortOrder
  }

  export type AppartenirMinOrderByAggregateInput = {
    id?: SortOrder
    reunionId?: SortOrder
    sessionsId?: SortOrder
  }

  export type AppartenirSumOrderByAggregateInput = {
    id?: SortOrder
    reunionId?: SortOrder
    sessionsId?: SortOrder
  }

  export type ConnecterCountOrderByAggregateInput = {
    id?: SortOrder
    sessionsId?: SortOrder
    usersId?: SortOrder
  }

  export type ConnecterAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionsId?: SortOrder
    usersId?: SortOrder
  }

  export type ConnecterMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionsId?: SortOrder
    usersId?: SortOrder
  }

  export type ConnecterMinOrderByAggregateInput = {
    id?: SortOrder
    sessionsId?: SortOrder
    usersId?: SortOrder
  }

  export type ConnecterSumOrderByAggregateInput = {
    id?: SortOrder
    sessionsId?: SortOrder
    usersId?: SortOrder
  }

  export type RoleCreateNestedManyWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    createMany?: RoleCreateManyUserInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type ReunionCreateNestedManyWithoutUsersInput = {
    create?: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput> | ReunionCreateWithoutUsersInput[] | ReunionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutUsersInput | ReunionCreateOrConnectWithoutUsersInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUsersInput = {
    create?: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput> | MessageCreateWithoutUsersInput[] | MessageUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUsersInput | MessageCreateOrConnectWithoutUsersInput[]
    createMany?: MessageCreateManyUsersInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ConnecterCreateNestedManyWithoutUsersInput = {
    create?: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput> | ConnecterCreateWithoutUsersInput[] | ConnecterUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutUsersInput | ConnecterCreateOrConnectWithoutUsersInput[]
    createMany?: ConnecterCreateManyUsersInputEnvelope
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    createMany?: RoleCreateManyUserInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type ReunionUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput> | ReunionCreateWithoutUsersInput[] | ReunionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutUsersInput | ReunionCreateOrConnectWithoutUsersInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput> | MessageCreateWithoutUsersInput[] | MessageUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUsersInput | MessageCreateOrConnectWithoutUsersInput[]
    createMany?: MessageCreateManyUsersInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ConnecterUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput> | ConnecterCreateWithoutUsersInput[] | ConnecterUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutUsersInput | ConnecterCreateOrConnectWithoutUsersInput[]
    createMany?: ConnecterCreateManyUsersInputEnvelope
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInput | RoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoleCreateManyUserInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInput | RoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInput | RoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type ReunionUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput> | ReunionCreateWithoutUsersInput[] | ReunionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutUsersInput | ReunionCreateOrConnectWithoutUsersInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutUsersInput | ReunionUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutUsersInput | ReunionUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutUsersInput | ReunionUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUsersNestedInput = {
    create?: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput> | MessageCreateWithoutUsersInput[] | MessageUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUsersInput | MessageCreateOrConnectWithoutUsersInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUsersInput | MessageUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: MessageCreateManyUsersInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUsersInput | MessageUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUsersInput | MessageUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConnecterUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput> | ConnecterCreateWithoutUsersInput[] | ConnecterUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutUsersInput | ConnecterCreateOrConnectWithoutUsersInput[]
    upsert?: ConnecterUpsertWithWhereUniqueWithoutUsersInput | ConnecterUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ConnecterCreateManyUsersInputEnvelope
    set?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    disconnect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    delete?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    update?: ConnecterUpdateWithWhereUniqueWithoutUsersInput | ConnecterUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ConnecterUpdateManyWithWhereWithoutUsersInput | ConnecterUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInput | RoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoleCreateManyUserInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInput | RoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInput | RoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type ReunionUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput> | ReunionCreateWithoutUsersInput[] | ReunionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutUsersInput | ReunionCreateOrConnectWithoutUsersInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutUsersInput | ReunionUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutUsersInput | ReunionUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutUsersInput | ReunionUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput> | MessageCreateWithoutUsersInput[] | MessageUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUsersInput | MessageCreateOrConnectWithoutUsersInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUsersInput | MessageUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: MessageCreateManyUsersInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUsersInput | MessageUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUsersInput | MessageUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConnecterUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput> | ConnecterCreateWithoutUsersInput[] | ConnecterUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutUsersInput | ConnecterCreateOrConnectWithoutUsersInput[]
    upsert?: ConnecterUpsertWithWhereUniqueWithoutUsersInput | ConnecterUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ConnecterCreateManyUsersInputEnvelope
    set?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    disconnect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    delete?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    update?: ConnecterUpdateWithWhereUniqueWithoutUsersInput | ConnecterUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ConnecterUpdateManyWithWhereWithoutUsersInput | ConnecterUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutRoleInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutRoleNestedInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput
    upsert?: UsersUpsertWithoutRoleInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRoleInput, UsersUpdateWithoutRoleInput>, UsersUncheckedUpdateWithoutRoleInput>
  }

  export type UsersCreateNestedManyWithoutReunionInput = {
    create?: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput> | UsersCreateWithoutReunionInput[] | UsersUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutReunionInput | UsersCreateOrConnectWithoutReunionInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReunionInput = {
    create?: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput> | MessageCreateWithoutReunionInput[] | MessageUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReunionInput | MessageCreateOrConnectWithoutReunionInput[]
    createMany?: MessageCreateManyReunionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type SessionsCreateNestedManyWithoutReunionInput = {
    create?: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput> | SessionsCreateWithoutReunionInput[] | SessionsUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: SessionsCreateOrConnectWithoutReunionInput | SessionsCreateOrConnectWithoutReunionInput[]
    connect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
  }

  export type AppartenirCreateNestedManyWithoutReunionInput = {
    create?: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput> | AppartenirCreateWithoutReunionInput[] | AppartenirUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutReunionInput | AppartenirCreateOrConnectWithoutReunionInput[]
    createMany?: AppartenirCreateManyReunionInputEnvelope
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutReunionInput = {
    create?: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput> | UsersCreateWithoutReunionInput[] | UsersUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutReunionInput | UsersCreateOrConnectWithoutReunionInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReunionInput = {
    create?: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput> | MessageCreateWithoutReunionInput[] | MessageUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReunionInput | MessageCreateOrConnectWithoutReunionInput[]
    createMany?: MessageCreateManyReunionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type SessionsUncheckedCreateNestedManyWithoutReunionInput = {
    create?: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput> | SessionsCreateWithoutReunionInput[] | SessionsUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: SessionsCreateOrConnectWithoutReunionInput | SessionsCreateOrConnectWithoutReunionInput[]
    connect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
  }

  export type AppartenirUncheckedCreateNestedManyWithoutReunionInput = {
    create?: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput> | AppartenirCreateWithoutReunionInput[] | AppartenirUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutReunionInput | AppartenirCreateOrConnectWithoutReunionInput[]
    createMany?: AppartenirCreateManyReunionInputEnvelope
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
  }

  export type UsersUpdateManyWithoutReunionNestedInput = {
    create?: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput> | UsersCreateWithoutReunionInput[] | UsersUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutReunionInput | UsersCreateOrConnectWithoutReunionInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutReunionInput | UsersUpsertWithWhereUniqueWithoutReunionInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutReunionInput | UsersUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutReunionInput | UsersUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReunionNestedInput = {
    create?: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput> | MessageCreateWithoutReunionInput[] | MessageUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReunionInput | MessageCreateOrConnectWithoutReunionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReunionInput | MessageUpsertWithWhereUniqueWithoutReunionInput[]
    createMany?: MessageCreateManyReunionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReunionInput | MessageUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReunionInput | MessageUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type SessionsUpdateManyWithoutReunionNestedInput = {
    create?: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput> | SessionsCreateWithoutReunionInput[] | SessionsUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: SessionsCreateOrConnectWithoutReunionInput | SessionsCreateOrConnectWithoutReunionInput[]
    upsert?: SessionsUpsertWithWhereUniqueWithoutReunionInput | SessionsUpsertWithWhereUniqueWithoutReunionInput[]
    set?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    disconnect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    delete?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    connect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    update?: SessionsUpdateWithWhereUniqueWithoutReunionInput | SessionsUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: SessionsUpdateManyWithWhereWithoutReunionInput | SessionsUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: SessionsScalarWhereInput | SessionsScalarWhereInput[]
  }

  export type AppartenirUpdateManyWithoutReunionNestedInput = {
    create?: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput> | AppartenirCreateWithoutReunionInput[] | AppartenirUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutReunionInput | AppartenirCreateOrConnectWithoutReunionInput[]
    upsert?: AppartenirUpsertWithWhereUniqueWithoutReunionInput | AppartenirUpsertWithWhereUniqueWithoutReunionInput[]
    createMany?: AppartenirCreateManyReunionInputEnvelope
    set?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    disconnect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    delete?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    update?: AppartenirUpdateWithWhereUniqueWithoutReunionInput | AppartenirUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: AppartenirUpdateManyWithWhereWithoutReunionInput | AppartenirUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutReunionNestedInput = {
    create?: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput> | UsersCreateWithoutReunionInput[] | UsersUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutReunionInput | UsersCreateOrConnectWithoutReunionInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutReunionInput | UsersUpsertWithWhereUniqueWithoutReunionInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutReunionInput | UsersUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutReunionInput | UsersUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReunionNestedInput = {
    create?: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput> | MessageCreateWithoutReunionInput[] | MessageUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReunionInput | MessageCreateOrConnectWithoutReunionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReunionInput | MessageUpsertWithWhereUniqueWithoutReunionInput[]
    createMany?: MessageCreateManyReunionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReunionInput | MessageUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReunionInput | MessageUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type SessionsUncheckedUpdateManyWithoutReunionNestedInput = {
    create?: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput> | SessionsCreateWithoutReunionInput[] | SessionsUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: SessionsCreateOrConnectWithoutReunionInput | SessionsCreateOrConnectWithoutReunionInput[]
    upsert?: SessionsUpsertWithWhereUniqueWithoutReunionInput | SessionsUpsertWithWhereUniqueWithoutReunionInput[]
    set?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    disconnect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    delete?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    connect?: SessionsWhereUniqueInput | SessionsWhereUniqueInput[]
    update?: SessionsUpdateWithWhereUniqueWithoutReunionInput | SessionsUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: SessionsUpdateManyWithWhereWithoutReunionInput | SessionsUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: SessionsScalarWhereInput | SessionsScalarWhereInput[]
  }

  export type AppartenirUncheckedUpdateManyWithoutReunionNestedInput = {
    create?: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput> | AppartenirCreateWithoutReunionInput[] | AppartenirUncheckedCreateWithoutReunionInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutReunionInput | AppartenirCreateOrConnectWithoutReunionInput[]
    upsert?: AppartenirUpsertWithWhereUniqueWithoutReunionInput | AppartenirUpsertWithWhereUniqueWithoutReunionInput[]
    createMany?: AppartenirCreateManyReunionInputEnvelope
    set?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    disconnect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    delete?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    update?: AppartenirUpdateWithWhereUniqueWithoutReunionInput | AppartenirUpdateWithWhereUniqueWithoutReunionInput[]
    updateMany?: AppartenirUpdateManyWithWhereWithoutReunionInput | AppartenirUpdateManyWithWhereWithoutReunionInput[]
    deleteMany?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutMessageInput = {
    create?: XOR<UsersCreateWithoutMessageInput, UsersUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMessageInput
    connect?: UsersWhereUniqueInput
  }

  export type ReunionCreateNestedOneWithoutMessageInput = {
    create?: XOR<ReunionCreateWithoutMessageInput, ReunionUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ReunionCreateOrConnectWithoutMessageInput
    connect?: ReunionWhereUniqueInput
  }

  export type UsersUpdateOneWithoutMessageNestedInput = {
    create?: XOR<UsersCreateWithoutMessageInput, UsersUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMessageInput
    upsert?: UsersUpsertWithoutMessageInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMessageInput, UsersUpdateWithoutMessageInput>, UsersUncheckedUpdateWithoutMessageInput>
  }

  export type ReunionUpdateOneWithoutMessageNestedInput = {
    create?: XOR<ReunionCreateWithoutMessageInput, ReunionUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ReunionCreateOrConnectWithoutMessageInput
    upsert?: ReunionUpsertWithoutMessageInput
    disconnect?: ReunionWhereInput | boolean
    delete?: ReunionWhereInput | boolean
    connect?: ReunionWhereUniqueInput
    update?: XOR<XOR<ReunionUpdateToOneWithWhereWithoutMessageInput, ReunionUpdateWithoutMessageInput>, ReunionUncheckedUpdateWithoutMessageInput>
  }

  export type ReunionCreateNestedManyWithoutSessionInput = {
    create?: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput> | ReunionCreateWithoutSessionInput[] | ReunionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSessionInput | ReunionCreateOrConnectWithoutSessionInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type AppartenirCreateNestedManyWithoutSessionsInput = {
    create?: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput> | AppartenirCreateWithoutSessionsInput[] | AppartenirUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutSessionsInput | AppartenirCreateOrConnectWithoutSessionsInput[]
    createMany?: AppartenirCreateManySessionsInputEnvelope
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
  }

  export type ConnecterCreateNestedManyWithoutSessionsInput = {
    create?: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput> | ConnecterCreateWithoutSessionsInput[] | ConnecterUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutSessionsInput | ConnecterCreateOrConnectWithoutSessionsInput[]
    createMany?: ConnecterCreateManySessionsInputEnvelope
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
  }

  export type ReunionUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput> | ReunionCreateWithoutSessionInput[] | ReunionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSessionInput | ReunionCreateOrConnectWithoutSessionInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type AppartenirUncheckedCreateNestedManyWithoutSessionsInput = {
    create?: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput> | AppartenirCreateWithoutSessionsInput[] | AppartenirUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutSessionsInput | AppartenirCreateOrConnectWithoutSessionsInput[]
    createMany?: AppartenirCreateManySessionsInputEnvelope
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
  }

  export type ConnecterUncheckedCreateNestedManyWithoutSessionsInput = {
    create?: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput> | ConnecterCreateWithoutSessionsInput[] | ConnecterUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutSessionsInput | ConnecterCreateOrConnectWithoutSessionsInput[]
    createMany?: ConnecterCreateManySessionsInputEnvelope
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReunionUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput> | ReunionCreateWithoutSessionInput[] | ReunionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSessionInput | ReunionCreateOrConnectWithoutSessionInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutSessionInput | ReunionUpsertWithWhereUniqueWithoutSessionInput[]
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutSessionInput | ReunionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutSessionInput | ReunionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type AppartenirUpdateManyWithoutSessionsNestedInput = {
    create?: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput> | AppartenirCreateWithoutSessionsInput[] | AppartenirUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutSessionsInput | AppartenirCreateOrConnectWithoutSessionsInput[]
    upsert?: AppartenirUpsertWithWhereUniqueWithoutSessionsInput | AppartenirUpsertWithWhereUniqueWithoutSessionsInput[]
    createMany?: AppartenirCreateManySessionsInputEnvelope
    set?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    disconnect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    delete?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    update?: AppartenirUpdateWithWhereUniqueWithoutSessionsInput | AppartenirUpdateWithWhereUniqueWithoutSessionsInput[]
    updateMany?: AppartenirUpdateManyWithWhereWithoutSessionsInput | AppartenirUpdateManyWithWhereWithoutSessionsInput[]
    deleteMany?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
  }

  export type ConnecterUpdateManyWithoutSessionsNestedInput = {
    create?: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput> | ConnecterCreateWithoutSessionsInput[] | ConnecterUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutSessionsInput | ConnecterCreateOrConnectWithoutSessionsInput[]
    upsert?: ConnecterUpsertWithWhereUniqueWithoutSessionsInput | ConnecterUpsertWithWhereUniqueWithoutSessionsInput[]
    createMany?: ConnecterCreateManySessionsInputEnvelope
    set?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    disconnect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    delete?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    update?: ConnecterUpdateWithWhereUniqueWithoutSessionsInput | ConnecterUpdateWithWhereUniqueWithoutSessionsInput[]
    updateMany?: ConnecterUpdateManyWithWhereWithoutSessionsInput | ConnecterUpdateManyWithWhereWithoutSessionsInput[]
    deleteMany?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
  }

  export type ReunionUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput> | ReunionCreateWithoutSessionInput[] | ReunionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSessionInput | ReunionCreateOrConnectWithoutSessionInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutSessionInput | ReunionUpsertWithWhereUniqueWithoutSessionInput[]
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutSessionInput | ReunionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutSessionInput | ReunionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type AppartenirUncheckedUpdateManyWithoutSessionsNestedInput = {
    create?: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput> | AppartenirCreateWithoutSessionsInput[] | AppartenirUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: AppartenirCreateOrConnectWithoutSessionsInput | AppartenirCreateOrConnectWithoutSessionsInput[]
    upsert?: AppartenirUpsertWithWhereUniqueWithoutSessionsInput | AppartenirUpsertWithWhereUniqueWithoutSessionsInput[]
    createMany?: AppartenirCreateManySessionsInputEnvelope
    set?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    disconnect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    delete?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    connect?: AppartenirWhereUniqueInput | AppartenirWhereUniqueInput[]
    update?: AppartenirUpdateWithWhereUniqueWithoutSessionsInput | AppartenirUpdateWithWhereUniqueWithoutSessionsInput[]
    updateMany?: AppartenirUpdateManyWithWhereWithoutSessionsInput | AppartenirUpdateManyWithWhereWithoutSessionsInput[]
    deleteMany?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
  }

  export type ConnecterUncheckedUpdateManyWithoutSessionsNestedInput = {
    create?: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput> | ConnecterCreateWithoutSessionsInput[] | ConnecterUncheckedCreateWithoutSessionsInput[]
    connectOrCreate?: ConnecterCreateOrConnectWithoutSessionsInput | ConnecterCreateOrConnectWithoutSessionsInput[]
    upsert?: ConnecterUpsertWithWhereUniqueWithoutSessionsInput | ConnecterUpsertWithWhereUniqueWithoutSessionsInput[]
    createMany?: ConnecterCreateManySessionsInputEnvelope
    set?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    disconnect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    delete?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    connect?: ConnecterWhereUniqueInput | ConnecterWhereUniqueInput[]
    update?: ConnecterUpdateWithWhereUniqueWithoutSessionsInput | ConnecterUpdateWithWhereUniqueWithoutSessionsInput[]
    updateMany?: ConnecterUpdateManyWithWhereWithoutSessionsInput | ConnecterUpdateManyWithWhereWithoutSessionsInput[]
    deleteMany?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
  }

  export type ReunionCreateNestedOneWithoutAppartenirInput = {
    create?: XOR<ReunionCreateWithoutAppartenirInput, ReunionUncheckedCreateWithoutAppartenirInput>
    connectOrCreate?: ReunionCreateOrConnectWithoutAppartenirInput
    connect?: ReunionWhereUniqueInput
  }

  export type SessionsCreateNestedOneWithoutAppartenirInput = {
    create?: XOR<SessionsCreateWithoutAppartenirInput, SessionsUncheckedCreateWithoutAppartenirInput>
    connectOrCreate?: SessionsCreateOrConnectWithoutAppartenirInput
    connect?: SessionsWhereUniqueInput
  }

  export type ReunionUpdateOneWithoutAppartenirNestedInput = {
    create?: XOR<ReunionCreateWithoutAppartenirInput, ReunionUncheckedCreateWithoutAppartenirInput>
    connectOrCreate?: ReunionCreateOrConnectWithoutAppartenirInput
    upsert?: ReunionUpsertWithoutAppartenirInput
    disconnect?: ReunionWhereInput | boolean
    delete?: ReunionWhereInput | boolean
    connect?: ReunionWhereUniqueInput
    update?: XOR<XOR<ReunionUpdateToOneWithWhereWithoutAppartenirInput, ReunionUpdateWithoutAppartenirInput>, ReunionUncheckedUpdateWithoutAppartenirInput>
  }

  export type SessionsUpdateOneWithoutAppartenirNestedInput = {
    create?: XOR<SessionsCreateWithoutAppartenirInput, SessionsUncheckedCreateWithoutAppartenirInput>
    connectOrCreate?: SessionsCreateOrConnectWithoutAppartenirInput
    upsert?: SessionsUpsertWithoutAppartenirInput
    disconnect?: SessionsWhereInput | boolean
    delete?: SessionsWhereInput | boolean
    connect?: SessionsWhereUniqueInput
    update?: XOR<XOR<SessionsUpdateToOneWithWhereWithoutAppartenirInput, SessionsUpdateWithoutAppartenirInput>, SessionsUncheckedUpdateWithoutAppartenirInput>
  }

  export type SessionsCreateNestedOneWithoutConnecterInput = {
    create?: XOR<SessionsCreateWithoutConnecterInput, SessionsUncheckedCreateWithoutConnecterInput>
    connectOrCreate?: SessionsCreateOrConnectWithoutConnecterInput
    connect?: SessionsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutConnecterInput = {
    create?: XOR<UsersCreateWithoutConnecterInput, UsersUncheckedCreateWithoutConnecterInput>
    connectOrCreate?: UsersCreateOrConnectWithoutConnecterInput
    connect?: UsersWhereUniqueInput
  }

  export type SessionsUpdateOneWithoutConnecterNestedInput = {
    create?: XOR<SessionsCreateWithoutConnecterInput, SessionsUncheckedCreateWithoutConnecterInput>
    connectOrCreate?: SessionsCreateOrConnectWithoutConnecterInput
    upsert?: SessionsUpsertWithoutConnecterInput
    disconnect?: SessionsWhereInput | boolean
    delete?: SessionsWhereInput | boolean
    connect?: SessionsWhereUniqueInput
    update?: XOR<XOR<SessionsUpdateToOneWithWhereWithoutConnecterInput, SessionsUpdateWithoutConnecterInput>, SessionsUncheckedUpdateWithoutConnecterInput>
  }

  export type UsersUpdateOneWithoutConnecterNestedInput = {
    create?: XOR<UsersCreateWithoutConnecterInput, UsersUncheckedCreateWithoutConnecterInput>
    connectOrCreate?: UsersCreateOrConnectWithoutConnecterInput
    upsert?: UsersUpsertWithoutConnecterInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutConnecterInput, UsersUpdateWithoutConnecterInput>, UsersUncheckedUpdateWithoutConnecterInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RoleCreateWithoutUserInput = {
    nom: string
  }

  export type RoleUncheckedCreateWithoutUserInput = {
    id?: number
    nom: string
  }

  export type RoleCreateOrConnectWithoutUserInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type RoleCreateManyUserInputEnvelope = {
    data: RoleCreateManyUserInput | RoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReunionCreateWithoutUsersInput = {
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    message?: MessageCreateNestedManyWithoutReunionInput
    session?: SessionsCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirCreateNestedManyWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutUsersInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    message?: MessageUncheckedCreateNestedManyWithoutReunionInput
    session?: SessionsUncheckedCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutReunionInput
  }

  export type ReunionCreateOrConnectWithoutUsersInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput>
  }

  export type MessageCreateWithoutUsersInput = {
    content: string
    Reunion?: ReunionCreateNestedOneWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutUsersInput = {
    id?: number
    content: string
    reunionId?: number | null
  }

  export type MessageCreateOrConnectWithoutUsersInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput>
  }

  export type MessageCreateManyUsersInputEnvelope = {
    data: MessageCreateManyUsersInput | MessageCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ConnecterCreateWithoutUsersInput = {
    Sessions?: SessionsCreateNestedOneWithoutConnecterInput
  }

  export type ConnecterUncheckedCreateWithoutUsersInput = {
    id?: number
    sessionsId?: number | null
  }

  export type ConnecterCreateOrConnectWithoutUsersInput = {
    where: ConnecterWhereUniqueInput
    create: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput>
  }

  export type ConnecterCreateManyUsersInputEnvelope = {
    data: ConnecterCreateManyUsersInput | ConnecterCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithWhereUniqueWithoutUserInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUserInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
  }

  export type RoleUpdateManyWithWhereWithoutUserInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUserInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: IntFilter<"Role"> | number
    nom?: StringFilter<"Role"> | string
    usersId?: IntFilter<"Role"> | number
  }

  export type ReunionUpsertWithWhereUniqueWithoutUsersInput = {
    where: ReunionWhereUniqueInput
    update: XOR<ReunionUpdateWithoutUsersInput, ReunionUncheckedUpdateWithoutUsersInput>
    create: XOR<ReunionCreateWithoutUsersInput, ReunionUncheckedCreateWithoutUsersInput>
  }

  export type ReunionUpdateWithWhereUniqueWithoutUsersInput = {
    where: ReunionWhereUniqueInput
    data: XOR<ReunionUpdateWithoutUsersInput, ReunionUncheckedUpdateWithoutUsersInput>
  }

  export type ReunionUpdateManyWithWhereWithoutUsersInput = {
    where: ReunionScalarWhereInput
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyWithoutUsersInput>
  }

  export type ReunionScalarWhereInput = {
    AND?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
    OR?: ReunionScalarWhereInput[]
    NOT?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
    id?: IntFilter<"Reunion"> | number
    sujet?: StringFilter<"Reunion"> | string
    date?: IntFilter<"Reunion"> | number
    duree?: StringNullableFilter<"Reunion"> | string | null
    lieu?: StringFilter<"Reunion"> | string
    usersId?: IntFilter<"Reunion"> | number
  }

  export type MessageUpsertWithWhereUniqueWithoutUsersInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUsersInput, MessageUncheckedUpdateWithoutUsersInput>
    create: XOR<MessageCreateWithoutUsersInput, MessageUncheckedCreateWithoutUsersInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUsersInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUsersInput, MessageUncheckedUpdateWithoutUsersInput>
  }

  export type MessageUpdateManyWithWhereWithoutUsersInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUsersInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    usersId?: IntNullableFilter<"Message"> | number | null
    reunionId?: IntNullableFilter<"Message"> | number | null
  }

  export type ConnecterUpsertWithWhereUniqueWithoutUsersInput = {
    where: ConnecterWhereUniqueInput
    update: XOR<ConnecterUpdateWithoutUsersInput, ConnecterUncheckedUpdateWithoutUsersInput>
    create: XOR<ConnecterCreateWithoutUsersInput, ConnecterUncheckedCreateWithoutUsersInput>
  }

  export type ConnecterUpdateWithWhereUniqueWithoutUsersInput = {
    where: ConnecterWhereUniqueInput
    data: XOR<ConnecterUpdateWithoutUsersInput, ConnecterUncheckedUpdateWithoutUsersInput>
  }

  export type ConnecterUpdateManyWithWhereWithoutUsersInput = {
    where: ConnecterScalarWhereInput
    data: XOR<ConnecterUpdateManyMutationInput, ConnecterUncheckedUpdateManyWithoutUsersInput>
  }

  export type ConnecterScalarWhereInput = {
    AND?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
    OR?: ConnecterScalarWhereInput[]
    NOT?: ConnecterScalarWhereInput | ConnecterScalarWhereInput[]
    id?: IntFilter<"Connecter"> | number
    sessionsId?: IntNullableFilter<"Connecter"> | number | null
    usersId?: IntNullableFilter<"Connecter"> | number | null
  }

  export type UsersCreateWithoutRoleInput = {
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Reunion?: ReunionCreateNestedManyWithoutUsersInput
    message?: MessageCreateNestedManyWithoutUsersInput
    connecter?: ConnecterCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutRoleInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Reunion?: ReunionUncheckedCreateNestedManyWithoutUsersInput
    message?: MessageUncheckedCreateNestedManyWithoutUsersInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutRoleInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
  }

  export type UsersUpsertWithoutRoleInput = {
    update: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRoleInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
  }

  export type UsersUpdateWithoutRoleInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUpdateManyWithoutUsersNestedInput
    message?: MessageUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUncheckedUpdateManyWithoutUsersNestedInput
    message?: MessageUncheckedUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutReunionInput = {
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleCreateNestedManyWithoutUserInput
    message?: MessageCreateNestedManyWithoutUsersInput
    connecter?: ConnecterCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutReunionInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    message?: MessageUncheckedCreateNestedManyWithoutUsersInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutReunionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput>
  }

  export type MessageCreateWithoutReunionInput = {
    content: string
    Users?: UsersCreateNestedOneWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReunionInput = {
    id?: number
    content: string
    usersId?: number | null
  }

  export type MessageCreateOrConnectWithoutReunionInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput>
  }

  export type MessageCreateManyReunionInputEnvelope = {
    data: MessageCreateManyReunionInput | MessageCreateManyReunionInput[]
    skipDuplicates?: boolean
  }

  export type SessionsCreateWithoutReunionInput = {
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    appartenir?: AppartenirCreateNestedManyWithoutSessionsInput
    connecter?: ConnecterCreateNestedManyWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutReunionInput = {
    id?: number
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutSessionsInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutSessionsInput
  }

  export type SessionsCreateOrConnectWithoutReunionInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput>
  }

  export type AppartenirCreateWithoutReunionInput = {
    Sessions?: SessionsCreateNestedOneWithoutAppartenirInput
  }

  export type AppartenirUncheckedCreateWithoutReunionInput = {
    id?: number
    sessionsId?: number | null
  }

  export type AppartenirCreateOrConnectWithoutReunionInput = {
    where: AppartenirWhereUniqueInput
    create: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput>
  }

  export type AppartenirCreateManyReunionInputEnvelope = {
    data: AppartenirCreateManyReunionInput | AppartenirCreateManyReunionInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutReunionInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutReunionInput, UsersUncheckedUpdateWithoutReunionInput>
    create: XOR<UsersCreateWithoutReunionInput, UsersUncheckedCreateWithoutReunionInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutReunionInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutReunionInput, UsersUncheckedUpdateWithoutReunionInput>
  }

  export type UsersUpdateManyWithWhereWithoutReunionInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutReunionInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: IntFilter<"Users"> | number
    prenom?: StringFilter<"Users"> | string
    nom?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    pays?: StringFilter<"Users"> | string
    ville?: StringFilter<"Users"> | string
    tel?: StringFilter<"Users"> | string
    age?: IntFilter<"Users"> | number
    avatar?: BytesNullableFilter<"Users"> | Buffer | null
    thematique?: StringNullableFilter<"Users"> | string | null
    cursus?: StringNullableFilter<"Users"> | string | null
    nomDiplome?: StringNullableFilter<"Users"> | string | null
    anneeDiplome?: IntNullableFilter<"Users"> | number | null
    etablissementDobtention?: StringNullableFilter<"Users"> | string | null
    filiere?: StringNullableFilter<"Users"> | string | null
    secteurDactivite?: StringNullableFilter<"Users"> | string | null
    intitulerDePoste?: StringNullableFilter<"Users"> | string | null
    entreprise?: StringNullableFilter<"Users"> | string | null
    objectifProfessionelle?: StringNullableFilter<"Users"> | string | null
    competenceAdevelopper?: StringNullableFilter<"Users"> | string | null
    interets?: StringNullableFilter<"Users"> | string | null
    domaineDeMentorate?: StringNullableFilter<"Users"> | string | null
    domaineDexpertise?: StringNullableFilter<"Users"> | string | null
    url?: StringNullableFilter<"Users"> | string | null
    reunionId?: IntNullableFilter<"Users"> | number | null
  }

  export type MessageUpsertWithWhereUniqueWithoutReunionInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReunionInput, MessageUncheckedUpdateWithoutReunionInput>
    create: XOR<MessageCreateWithoutReunionInput, MessageUncheckedCreateWithoutReunionInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReunionInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReunionInput, MessageUncheckedUpdateWithoutReunionInput>
  }

  export type MessageUpdateManyWithWhereWithoutReunionInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReunionInput>
  }

  export type SessionsUpsertWithWhereUniqueWithoutReunionInput = {
    where: SessionsWhereUniqueInput
    update: XOR<SessionsUpdateWithoutReunionInput, SessionsUncheckedUpdateWithoutReunionInput>
    create: XOR<SessionsCreateWithoutReunionInput, SessionsUncheckedCreateWithoutReunionInput>
  }

  export type SessionsUpdateWithWhereUniqueWithoutReunionInput = {
    where: SessionsWhereUniqueInput
    data: XOR<SessionsUpdateWithoutReunionInput, SessionsUncheckedUpdateWithoutReunionInput>
  }

  export type SessionsUpdateManyWithWhereWithoutReunionInput = {
    where: SessionsScalarWhereInput
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyWithoutReunionInput>
  }

  export type SessionsScalarWhereInput = {
    AND?: SessionsScalarWhereInput | SessionsScalarWhereInput[]
    OR?: SessionsScalarWhereInput[]
    NOT?: SessionsScalarWhereInput | SessionsScalarWhereInput[]
    id?: IntFilter<"Sessions"> | number
    titre?: StringFilter<"Sessions"> | string
    description?: StringFilter<"Sessions"> | string
    createdAt?: DateTimeFilter<"Sessions"> | Date | string
    updatedAt?: DateTimeFilter<"Sessions"> | Date | string
    duree?: StringFilter<"Sessions"> | string
    contacts?: StringFilter<"Sessions"> | string
    point?: IntFilter<"Sessions"> | number
    ressources?: StringFilter<"Sessions"> | string
    reunionId?: IntNullableFilter<"Sessions"> | number | null
  }

  export type AppartenirUpsertWithWhereUniqueWithoutReunionInput = {
    where: AppartenirWhereUniqueInput
    update: XOR<AppartenirUpdateWithoutReunionInput, AppartenirUncheckedUpdateWithoutReunionInput>
    create: XOR<AppartenirCreateWithoutReunionInput, AppartenirUncheckedCreateWithoutReunionInput>
  }

  export type AppartenirUpdateWithWhereUniqueWithoutReunionInput = {
    where: AppartenirWhereUniqueInput
    data: XOR<AppartenirUpdateWithoutReunionInput, AppartenirUncheckedUpdateWithoutReunionInput>
  }

  export type AppartenirUpdateManyWithWhereWithoutReunionInput = {
    where: AppartenirScalarWhereInput
    data: XOR<AppartenirUpdateManyMutationInput, AppartenirUncheckedUpdateManyWithoutReunionInput>
  }

  export type AppartenirScalarWhereInput = {
    AND?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
    OR?: AppartenirScalarWhereInput[]
    NOT?: AppartenirScalarWhereInput | AppartenirScalarWhereInput[]
    id?: IntFilter<"Appartenir"> | number
    reunionId?: IntNullableFilter<"Appartenir"> | number | null
    sessionsId?: IntNullableFilter<"Appartenir"> | number | null
  }

  export type UsersCreateWithoutMessageInput = {
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleCreateNestedManyWithoutUserInput
    Reunion?: ReunionCreateNestedManyWithoutUsersInput
    connecter?: ConnecterCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutMessageInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Reunion?: ReunionUncheckedCreateNestedManyWithoutUsersInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutMessageInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMessageInput, UsersUncheckedCreateWithoutMessageInput>
  }

  export type ReunionCreateWithoutMessageInput = {
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersCreateNestedManyWithoutReunionInput
    session?: SessionsCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirCreateNestedManyWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutMessageInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersUncheckedCreateNestedManyWithoutReunionInput
    session?: SessionsUncheckedCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutReunionInput
  }

  export type ReunionCreateOrConnectWithoutMessageInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutMessageInput, ReunionUncheckedCreateWithoutMessageInput>
  }

  export type UsersUpsertWithoutMessageInput = {
    update: XOR<UsersUpdateWithoutMessageInput, UsersUncheckedUpdateWithoutMessageInput>
    create: XOR<UsersCreateWithoutMessageInput, UsersUncheckedCreateWithoutMessageInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMessageInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMessageInput, UsersUncheckedUpdateWithoutMessageInput>
  }

  export type UsersUpdateWithoutMessageInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUncheckedUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ReunionUpsertWithoutMessageInput = {
    update: XOR<ReunionUpdateWithoutMessageInput, ReunionUncheckedUpdateWithoutMessageInput>
    create: XOR<ReunionCreateWithoutMessageInput, ReunionUncheckedCreateWithoutMessageInput>
    where?: ReunionWhereInput
  }

  export type ReunionUpdateToOneWithWhereWithoutMessageInput = {
    where?: ReunionWhereInput
    data: XOR<ReunionUpdateWithoutMessageInput, ReunionUncheckedUpdateWithoutMessageInput>
  }

  export type ReunionUpdateWithoutMessageInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateManyWithoutReunionNestedInput
    session?: SessionsUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUncheckedUpdateManyWithoutReunionNestedInput
    session?: SessionsUncheckedUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutReunionNestedInput
  }

  export type ReunionCreateWithoutSessionInput = {
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersCreateNestedManyWithoutReunionInput
    message?: MessageCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirCreateNestedManyWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutSessionInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersUncheckedCreateNestedManyWithoutReunionInput
    message?: MessageUncheckedCreateNestedManyWithoutReunionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutReunionInput
  }

  export type ReunionCreateOrConnectWithoutSessionInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput>
  }

  export type AppartenirCreateWithoutSessionsInput = {
    Reunion?: ReunionCreateNestedOneWithoutAppartenirInput
  }

  export type AppartenirUncheckedCreateWithoutSessionsInput = {
    id?: number
    reunionId?: number | null
  }

  export type AppartenirCreateOrConnectWithoutSessionsInput = {
    where: AppartenirWhereUniqueInput
    create: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput>
  }

  export type AppartenirCreateManySessionsInputEnvelope = {
    data: AppartenirCreateManySessionsInput | AppartenirCreateManySessionsInput[]
    skipDuplicates?: boolean
  }

  export type ConnecterCreateWithoutSessionsInput = {
    Users?: UsersCreateNestedOneWithoutConnecterInput
  }

  export type ConnecterUncheckedCreateWithoutSessionsInput = {
    id?: number
    usersId?: number | null
  }

  export type ConnecterCreateOrConnectWithoutSessionsInput = {
    where: ConnecterWhereUniqueInput
    create: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput>
  }

  export type ConnecterCreateManySessionsInputEnvelope = {
    data: ConnecterCreateManySessionsInput | ConnecterCreateManySessionsInput[]
    skipDuplicates?: boolean
  }

  export type ReunionUpsertWithWhereUniqueWithoutSessionInput = {
    where: ReunionWhereUniqueInput
    update: XOR<ReunionUpdateWithoutSessionInput, ReunionUncheckedUpdateWithoutSessionInput>
    create: XOR<ReunionCreateWithoutSessionInput, ReunionUncheckedCreateWithoutSessionInput>
  }

  export type ReunionUpdateWithWhereUniqueWithoutSessionInput = {
    where: ReunionWhereUniqueInput
    data: XOR<ReunionUpdateWithoutSessionInput, ReunionUncheckedUpdateWithoutSessionInput>
  }

  export type ReunionUpdateManyWithWhereWithoutSessionInput = {
    where: ReunionScalarWhereInput
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyWithoutSessionInput>
  }

  export type AppartenirUpsertWithWhereUniqueWithoutSessionsInput = {
    where: AppartenirWhereUniqueInput
    update: XOR<AppartenirUpdateWithoutSessionsInput, AppartenirUncheckedUpdateWithoutSessionsInput>
    create: XOR<AppartenirCreateWithoutSessionsInput, AppartenirUncheckedCreateWithoutSessionsInput>
  }

  export type AppartenirUpdateWithWhereUniqueWithoutSessionsInput = {
    where: AppartenirWhereUniqueInput
    data: XOR<AppartenirUpdateWithoutSessionsInput, AppartenirUncheckedUpdateWithoutSessionsInput>
  }

  export type AppartenirUpdateManyWithWhereWithoutSessionsInput = {
    where: AppartenirScalarWhereInput
    data: XOR<AppartenirUpdateManyMutationInput, AppartenirUncheckedUpdateManyWithoutSessionsInput>
  }

  export type ConnecterUpsertWithWhereUniqueWithoutSessionsInput = {
    where: ConnecterWhereUniqueInput
    update: XOR<ConnecterUpdateWithoutSessionsInput, ConnecterUncheckedUpdateWithoutSessionsInput>
    create: XOR<ConnecterCreateWithoutSessionsInput, ConnecterUncheckedCreateWithoutSessionsInput>
  }

  export type ConnecterUpdateWithWhereUniqueWithoutSessionsInput = {
    where: ConnecterWhereUniqueInput
    data: XOR<ConnecterUpdateWithoutSessionsInput, ConnecterUncheckedUpdateWithoutSessionsInput>
  }

  export type ConnecterUpdateManyWithWhereWithoutSessionsInput = {
    where: ConnecterScalarWhereInput
    data: XOR<ConnecterUpdateManyMutationInput, ConnecterUncheckedUpdateManyWithoutSessionsInput>
  }

  export type ReunionCreateWithoutAppartenirInput = {
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersCreateNestedManyWithoutReunionInput
    message?: MessageCreateNestedManyWithoutReunionInput
    session?: SessionsCreateNestedManyWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutAppartenirInput = {
    id?: number
    sujet: string
    date: number
    duree?: string | null
    lieu: string
    usersId: number
    users?: UsersUncheckedCreateNestedManyWithoutReunionInput
    message?: MessageUncheckedCreateNestedManyWithoutReunionInput
    session?: SessionsUncheckedCreateNestedManyWithoutReunionInput
  }

  export type ReunionCreateOrConnectWithoutAppartenirInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutAppartenirInput, ReunionUncheckedCreateWithoutAppartenirInput>
  }

  export type SessionsCreateWithoutAppartenirInput = {
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionCreateNestedManyWithoutSessionInput
    connecter?: ConnecterCreateNestedManyWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutAppartenirInput = {
    id?: number
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionUncheckedCreateNestedManyWithoutSessionInput
    connecter?: ConnecterUncheckedCreateNestedManyWithoutSessionsInput
  }

  export type SessionsCreateOrConnectWithoutAppartenirInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutAppartenirInput, SessionsUncheckedCreateWithoutAppartenirInput>
  }

  export type ReunionUpsertWithoutAppartenirInput = {
    update: XOR<ReunionUpdateWithoutAppartenirInput, ReunionUncheckedUpdateWithoutAppartenirInput>
    create: XOR<ReunionCreateWithoutAppartenirInput, ReunionUncheckedCreateWithoutAppartenirInput>
    where?: ReunionWhereInput
  }

  export type ReunionUpdateToOneWithWhereWithoutAppartenirInput = {
    where?: ReunionWhereInput
    data: XOR<ReunionUpdateWithoutAppartenirInput, ReunionUncheckedUpdateWithoutAppartenirInput>
  }

  export type ReunionUpdateWithoutAppartenirInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateManyWithoutReunionNestedInput
    message?: MessageUpdateManyWithoutReunionNestedInput
    session?: SessionsUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutAppartenirInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUncheckedUpdateManyWithoutReunionNestedInput
    message?: MessageUncheckedUpdateManyWithoutReunionNestedInput
    session?: SessionsUncheckedUpdateManyWithoutReunionNestedInput
  }

  export type SessionsUpsertWithoutAppartenirInput = {
    update: XOR<SessionsUpdateWithoutAppartenirInput, SessionsUncheckedUpdateWithoutAppartenirInput>
    create: XOR<SessionsCreateWithoutAppartenirInput, SessionsUncheckedCreateWithoutAppartenirInput>
    where?: SessionsWhereInput
  }

  export type SessionsUpdateToOneWithWhereWithoutAppartenirInput = {
    where?: SessionsWhereInput
    data: XOR<SessionsUpdateWithoutAppartenirInput, SessionsUncheckedUpdateWithoutAppartenirInput>
  }

  export type SessionsUpdateWithoutAppartenirInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUpdateManyWithoutSessionNestedInput
    connecter?: ConnecterUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateWithoutAppartenirInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUncheckedUpdateManyWithoutSessionNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsCreateWithoutConnecterInput = {
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionCreateNestedManyWithoutSessionInput
    appartenir?: AppartenirCreateNestedManyWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutConnecterInput = {
    id?: number
    titre: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    duree: string
    contacts: string
    point: number
    ressources: string
    reunionId?: number | null
    Reunion?: ReunionUncheckedCreateNestedManyWithoutSessionInput
    appartenir?: AppartenirUncheckedCreateNestedManyWithoutSessionsInput
  }

  export type SessionsCreateOrConnectWithoutConnecterInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutConnecterInput, SessionsUncheckedCreateWithoutConnecterInput>
  }

  export type UsersCreateWithoutConnecterInput = {
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleCreateNestedManyWithoutUserInput
    Reunion?: ReunionCreateNestedManyWithoutUsersInput
    message?: MessageCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutConnecterInput = {
    id?: number
    prenom: string
    nom: string
    email: string
    password: string
    pays: string
    ville: string
    tel: string
    age: number
    avatar?: Buffer | null
    thematique?: string | null
    cursus?: string | null
    nomDiplome?: string | null
    anneeDiplome?: number | null
    etablissementDobtention?: string | null
    filiere?: string | null
    secteurDactivite?: string | null
    intitulerDePoste?: string | null
    entreprise?: string | null
    objectifProfessionelle?: string | null
    competenceAdevelopper?: string | null
    interets?: string | null
    domaineDeMentorate?: string | null
    domaineDexpertise?: string | null
    url?: string | null
    reunionId?: number | null
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Reunion?: ReunionUncheckedCreateNestedManyWithoutUsersInput
    message?: MessageUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutConnecterInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutConnecterInput, UsersUncheckedCreateWithoutConnecterInput>
  }

  export type SessionsUpsertWithoutConnecterInput = {
    update: XOR<SessionsUpdateWithoutConnecterInput, SessionsUncheckedUpdateWithoutConnecterInput>
    create: XOR<SessionsCreateWithoutConnecterInput, SessionsUncheckedCreateWithoutConnecterInput>
    where?: SessionsWhereInput
  }

  export type SessionsUpdateToOneWithWhereWithoutConnecterInput = {
    where?: SessionsWhereInput
    data: XOR<SessionsUpdateWithoutConnecterInput, SessionsUncheckedUpdateWithoutConnecterInput>
  }

  export type SessionsUpdateWithoutConnecterInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUpdateManyWithoutSessionNestedInput
    appartenir?: AppartenirUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateWithoutConnecterInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Reunion?: ReunionUncheckedUpdateManyWithoutSessionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutSessionsNestedInput
  }

  export type UsersUpsertWithoutConnecterInput = {
    update: XOR<UsersUpdateWithoutConnecterInput, UsersUncheckedUpdateWithoutConnecterInput>
    create: XOR<UsersCreateWithoutConnecterInput, UsersUncheckedCreateWithoutConnecterInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutConnecterInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutConnecterInput, UsersUncheckedUpdateWithoutConnecterInput>
  }

  export type UsersUpdateWithoutConnecterInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUpdateManyWithoutUsersNestedInput
    message?: MessageUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutConnecterInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Reunion?: ReunionUncheckedUpdateManyWithoutUsersNestedInput
    message?: MessageUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type RoleCreateManyUserInput = {
    id?: number
    nom: string
  }

  export type MessageCreateManyUsersInput = {
    id?: number
    content: string
    reunionId?: number | null
  }

  export type ConnecterCreateManyUsersInput = {
    id?: number
    sessionsId?: number | null
  }

  export type RoleUpdateWithoutUserInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ReunionUpdateWithoutUsersInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    message?: MessageUpdateManyWithoutReunionNestedInput
    session?: SessionsUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    message?: MessageUncheckedUpdateManyWithoutReunionNestedInput
    session?: SessionsUncheckedUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutUsersInput = {
    content?: StringFieldUpdateOperationsInput | string
    Reunion?: ReunionUpdateOneWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterUpdateWithoutUsersInput = {
    Sessions?: SessionsUpdateOneWithoutConnecterNestedInput
  }

  export type ConnecterUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageCreateManyReunionInput = {
    id?: number
    content: string
    usersId?: number | null
  }

  export type AppartenirCreateManyReunionInput = {
    id?: number
    sessionsId?: number | null
  }

  export type UsersUpdateWithoutReunionInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUpdateManyWithoutUserNestedInput
    message?: MessageUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    message?: MessageUncheckedUpdateManyWithoutUsersNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    avatar?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    thematique?: NullableStringFieldUpdateOperationsInput | string | null
    cursus?: NullableStringFieldUpdateOperationsInput | string | null
    nomDiplome?: NullableStringFieldUpdateOperationsInput | string | null
    anneeDiplome?: NullableIntFieldUpdateOperationsInput | number | null
    etablissementDobtention?: NullableStringFieldUpdateOperationsInput | string | null
    filiere?: NullableStringFieldUpdateOperationsInput | string | null
    secteurDactivite?: NullableStringFieldUpdateOperationsInput | string | null
    intitulerDePoste?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: NullableStringFieldUpdateOperationsInput | string | null
    objectifProfessionelle?: NullableStringFieldUpdateOperationsInput | string | null
    competenceAdevelopper?: NullableStringFieldUpdateOperationsInput | string | null
    interets?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDeMentorate?: NullableStringFieldUpdateOperationsInput | string | null
    domaineDexpertise?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUpdateWithoutReunionInput = {
    content?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateOneWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUncheckedUpdateManyWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionsUpdateWithoutReunionInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    appartenir?: AppartenirUpdateManyWithoutSessionsNestedInput
    connecter?: ConnecterUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
    appartenir?: AppartenirUncheckedUpdateManyWithoutSessionsNestedInput
    connecter?: ConnecterUncheckedUpdateManyWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateManyWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    contacts?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    ressources?: StringFieldUpdateOperationsInput | string
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirUpdateWithoutReunionInput = {
    Sessions?: SessionsUpdateOneWithoutAppartenirNestedInput
  }

  export type AppartenirUncheckedUpdateWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirUncheckedUpdateManyWithoutReunionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirCreateManySessionsInput = {
    id?: number
    reunionId?: number | null
  }

  export type ConnecterCreateManySessionsInput = {
    id?: number
    usersId?: number | null
  }

  export type ReunionUpdateWithoutSessionInput = {
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateManyWithoutReunionNestedInput
    message?: MessageUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
    users?: UsersUncheckedUpdateManyWithoutReunionNestedInput
    message?: MessageUncheckedUpdateManyWithoutReunionNestedInput
    appartenir?: AppartenirUncheckedUpdateManyWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sujet?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    lieu?: StringFieldUpdateOperationsInput | string
    usersId?: IntFieldUpdateOperationsInput | number
  }

  export type AppartenirUpdateWithoutSessionsInput = {
    Reunion?: ReunionUpdateOneWithoutAppartenirNestedInput
  }

  export type AppartenirUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppartenirUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reunionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterUpdateWithoutSessionsInput = {
    Users?: UsersUpdateOneWithoutConnecterNestedInput
  }

  export type ConnecterUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConnecterUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReunionCountOutputTypeDefaultArgs instead
     */
    export type ReunionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReunionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionsCountOutputTypeDefaultArgs instead
     */
    export type SessionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReunionDefaultArgs instead
     */
    export type ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReunionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionsDefaultArgs instead
     */
    export type SessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppartenirDefaultArgs instead
     */
    export type AppartenirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppartenirDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConnecterDefaultArgs instead
     */
    export type ConnecterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConnecterDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}